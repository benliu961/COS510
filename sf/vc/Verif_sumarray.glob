DIGEST 0023f7485201f0d736fa2fb7a5e02978
FVC.Verif_sumarray
R4780:4789 VC.Preface <> <> lib
R5122:5140 VST.floyd.proofauto <> <> lib
R5158:5168 VC.sumarray <> <> lib
inst 5190:5198 <> CompSpecs
R5202:5210 VST.veric.compspecs <> compspecs class
R5228:5231 VC.sumarray <> prog def
def 5254:5258 <> Vprog
R5262:5269 VST.veric.mpred <> varspecs def
R5285:5288 VC.sumarray <> prog def
def 5913:5917 <> sum_Z
R5927:5930 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5921:5924 Coq.Init.Datatypes <> list ind
R5926:5926 Coq.Numbers.BinNums <> Z ind
R5931:5931 Coq.Numbers.BinNums <> Z ind
R5936:5945 Coq.Lists.List <> fold_right def
R5947:5951 Coq.ZArith.BinInt Z add def
prf 6079:6087 <> sum_Z_app
binder 6099:6099 <> a:1
binder 6101:6101 <> b:2
R6116:6119 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6104:6108 VC.Verif_sumarray <> sum_Z def
R6112:6113 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R6111:6111 VC.Verif_sumarray <> a:1 var
R6114:6114 VC.Verif_sumarray <> b:2 var
R6127:6129 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R6120:6124 VC.Verif_sumarray <> sum_Z def
R6126:6126 VC.Verif_sumarray <> a:1 var
R6130:6134 VC.Verif_sumarray <> sum_Z def
R6136:6136 VC.Verif_sumarray <> b:2 var
def 7205:7217 <> sumarray_spec
R7226:7228 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R7221:7225 compcert.common.AST <> ident def
R7229:7235 VST.veric.mpred <> funspec ind
R7240:7247 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R7257:7258 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R7248:7256 VC.sumarray <> _sumarray def
R7259:7263 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7265:7266 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7270:7271 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7274:7276 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7282:7283 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7292:7294 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7301:7302 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7307:7308 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7310:7317 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7328:7329 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7334:7338 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7570:7578 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7584:7588 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7318:7321 compcert.export.Ctypesdefs <> tptr def
R7323:7327 compcert.export.Ctypesdefs <> tuint def
R7330:7333 compcert.export.Ctypesdefs <> tint def
R7579:7583 compcert.export.Ctypesdefs <> tuint def
R7267:7269 compcert.common.Values <> val ind
R7277:7281 VST.msl.shares <> share def
R7295:7298 Coq.Init.Datatypes <> list ind
R7300:7300 Coq.Numbers.BinNums <> Z ind
R7309:7309 Coq.Numbers.BinNums <> Z ind
binder 7264:7264 <> a:3
binder 7272:7273 <> sh:4
binder 7284:7291 <> contents:5
binder 7303:7306 <> size:6
R7339:7345 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R7363:7364 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R7392:7402 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R7456:7459 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R7346:7359 VST.veric.shares <> readable_share def
R7361:7362 VC.Verif_sumarray <> sh:4 var
R7366:7369 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R7374:7377 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R7370:7373 VC.Verif_sumarray <> size:6 var
R7370:7373 VC.Verif_sumarray <> size:6 var
R7378:7391 compcert.lib.Integers Int max_signed def
R7403:7408 Coq.Lists.List <> Forall ind
R7448:7455 VC.Verif_sumarray <> contents:5 var
binder 7415:7415 <> x:7
R7421:7424 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R7426:7429 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R7425:7425 VC.Verif_sumarray <> x:7 var
R7425:7425 VC.Verif_sumarray <> x:7 var
R7430:7445 compcert.lib.Integers Int max_unsigned def
R7460:7467 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R7469:7470 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R7491:7494 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R7468:7468 VC.Verif_sumarray <> a:3 var
R7471:7474 compcert.common.Values <> Vint constr
R7477:7484 compcert.lib.Integers Int repr def
R7486:7489 VC.Verif_sumarray <> size:6 var
R7495:7501 VST.floyd.canon <> ::assert4:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7569:7569 VST.floyd.canon <> ::assert4:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7502:7508 VST.floyd.field_at <> data_at def
R7510:7511 VC.Verif_sumarray <> sh:4 var
R7514:7519 compcert.export.Ctypesdefs <> tarray def
R7521:7525 compcert.export.Ctypesdefs <> tuint def
R7527:7530 VC.Verif_sumarray <> size:6 var
R7534:7536 Coq.Lists.List <> map def
R7544:7546 Coq.Lists.List <> map def
R7557:7564 VC.Verif_sumarray <> contents:5 var
R7548:7555 compcert.lib.Integers Int repr def
R7538:7541 compcert.common.Values <> Vint constr
R7568:7568 VC.Verif_sumarray <> a:3 var
binder 7264:7264 <> a:8
binder 7272:7273 <> sh:9
binder 7284:7291 <> contents:10
binder 7303:7306 <> size:11
R7589:7596 VST.floyd.canon <> ::assert:'PROP'_'()'_x not
R7597:7604 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R7637:7640 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R7605:7608 compcert.common.Values <> Vint constr
R7611:7618 compcert.lib.Integers Int repr def
R7621:7625 VC.Verif_sumarray <> sum_Z def
R7627:7634 VC.Verif_sumarray <> contents:10 var
R7641:7645 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7713:7713 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7646:7652 VST.floyd.field_at <> data_at def
R7654:7655 VC.Verif_sumarray <> sh:9 var
R7658:7663 compcert.export.Ctypesdefs <> tarray def
R7665:7669 compcert.export.Ctypesdefs <> tuint def
R7671:7674 VC.Verif_sumarray <> size:11 var
R7678:7680 Coq.Lists.List <> map def
R7688:7690 Coq.Lists.List <> map def
R7701:7708 VC.Verif_sumarray <> contents:10 var
R7692:7699 compcert.lib.Integers Int repr def
R7682:7685 compcert.common.Values <> Vint constr
R7712:7712 VC.Verif_sumarray <> a:8 var
R9873:9875 compcert.common.Values <> val ind
def 11889:11897 <> main_spec
R11903:11910 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R11916:11918 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R11911:11915 VC.sumarray <> _main def
R11919:11923 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R11926:11928 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R11936:11946 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R11966:11975 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R11980:11989 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R11976:11979 compcert.export.Ctypesdefs <> tint def
R11929:11935 VST.veric.SeparationLogic <> globals def
binder 11924:11925 <> gv:12
R11947:11954 VST.veric.SeparationLogic <> main_pre def
R11964:11965 VC.Verif_sumarray <> gv:12 var
R11961:11962 Coq.Init.Datatypes <> tt constr
R11956:11959 VC.sumarray <> prog def
binder 11924:11925 <> gv:13
R11990:12002 VST.floyd.canon <> ::assert:'PROP'_'()'_x not
R12003:12010 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R12036:12042 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R12011:12014 compcert.common.Values <> Vint constr
R12017:12024 compcert.lib.Integers Int repr def
R12032:12032 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R12030:12030 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R12028:12028 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R12043:12046 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R12049:12049 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R12047:12048 VST.msl.seplog <> TT meth
def 13916:13920 <> Gprog
R13925:13925 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R13939:13940 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R13950:13950 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R13926:13938 VC.Verif_sumarray <> sumarray_spec def
R13941:13949 VC.Verif_sumarray <> main_spec def
R14298:14302 VC.Verif_sumarray <> Vprog def
R14359:14366 VST.veric.mpred <> varspecs def
prf 14773:14785 <> body_sumarray
R14788:14797 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R14822:14834 VC.Verif_sumarray <> sumarray_spec def
R14811:14820 VC.sumarray <> f_sumarray def
R14805:14809 VC.Verif_sumarray <> Gprog def
R14799:14803 VC.Verif_sumarray <> Vprog def
R18236:18243 compcert.lib.Integers Int repr def
R18307:18310 compcert.common.Values <> Vint constr
R18313:18320 compcert.lib.Integers Int repr def
R18378:18381 VST.floyd.canon <> temp constr
R18383:18384 VC.sumarray <> _i def
R18387:18390 compcert.common.Values <> Vint constr
R18393:18400 compcert.lib.Integers Int repr def
R18872:18881 VST.floyd.client_lemmas <> abbreviate def
R18924:18933 VST.floyd.client_lemmas <> abbreviate def
R19192:19201 VST.floyd.client_lemmas <> abbreviate def
R19273:19282 VST.floyd.client_lemmas <> abbreviate def
R19347:19356 VST.floyd.client_lemmas <> abbreviate def
R20672:20674 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R20679:20683 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R20678:20678 Coq.Numbers.BinNums <> Z ind
binder 20675:20675 <> i:14
R20684:20690 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R20705:20709 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R20692:20695 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R20697:20700 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R20696:20696 VC.Verif_sumarray <> i:14 var
R20696:20696 VC.Verif_sumarray <> i:14 var
R20710:20716 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R20726:20737 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R20765:20776 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R20807:20818 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R20875:20879 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R20717:20720 VST.floyd.canon <> temp constr
R20722:20723 VC.sumarray <> _a def
R20738:20741 VST.floyd.canon <> temp constr
R20743:20744 VC.sumarray <> _i def
R20747:20750 compcert.common.Values <> Vint constr
R20753:20760 compcert.lib.Integers Int repr def
R20762:20762 VC.Verif_sumarray <> i:14 var
R20777:20780 VST.floyd.canon <> temp constr
R20782:20783 VC.sumarray <> _n def
R20786:20789 compcert.common.Values <> Vint constr
R20792:20799 compcert.lib.Integers Int repr def
R20819:20822 VST.floyd.canon <> temp constr
R20824:20825 VC.sumarray <> _s def
R20828:20831 compcert.common.Values <> Vint constr
R20834:20841 compcert.lib.Integers Int repr def
R20844:20848 VC.Verif_sumarray <> sum_Z def
R20851:20857 VST.zlist.sublist <> sublist def
R20861:20861 VC.Verif_sumarray <> i:14 var
R20880:20886 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R20954:20954 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R20887:20893 VST.floyd.field_at <> data_at def
R20899:20904 compcert.export.Ctypesdefs <> tarray def
R20906:20910 compcert.export.Ctypesdefs <> tuint def
R20919:20921 Coq.Lists.List <> map def
R20929:20931 Coq.Lists.List <> map def
R20933:20940 compcert.lib.Integers Int repr def
R20923:20926 compcert.common.Values <> Vint constr
R20672:20674 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R20679:20683 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R20678:20678 Coq.Numbers.BinNums <> Z ind
binder 20675:20675 <> i:15
R20684:20690 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R20705:20709 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R20692:20695 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R20697:20700 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R20696:20696 VC.Verif_sumarray <> i:15 var
R20696:20696 VC.Verif_sumarray <> i:15 var
R20710:20716 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R20726:20737 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R20765:20776 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R20807:20818 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R20875:20879 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R20717:20720 VST.floyd.canon <> temp constr
R20722:20723 VC.sumarray <> _a def
R20738:20741 VST.floyd.canon <> temp constr
R20743:20744 VC.sumarray <> _i def
R20747:20750 compcert.common.Values <> Vint constr
R20753:20760 compcert.lib.Integers Int repr def
R20762:20762 VC.Verif_sumarray <> i:15 var
R20777:20780 VST.floyd.canon <> temp constr
R20782:20783 VC.sumarray <> _n def
R20786:20789 compcert.common.Values <> Vint constr
R20792:20799 compcert.lib.Integers Int repr def
R20819:20822 VST.floyd.canon <> temp constr
R20824:20825 VC.sumarray <> _s def
R20828:20831 compcert.common.Values <> Vint constr
R20834:20841 compcert.lib.Integers Int repr def
R20844:20848 VC.Verif_sumarray <> sum_Z def
R20851:20857 VST.zlist.sublist <> sublist def
R20861:20861 VC.Verif_sumarray <> i:15 var
R20880:20886 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R20954:20954 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R20887:20893 VST.floyd.field_at <> data_at def
R20899:20904 compcert.export.Ctypesdefs <> tarray def
R20906:20910 compcert.export.Ctypesdefs <> tuint def
R20919:20921 Coq.Lists.List <> map def
R20929:20931 Coq.Lists.List <> map def
R20933:20940 compcert.lib.Integers Int repr def
R20923:20926 compcert.common.Values <> Vint constr
def 22234:22291 <> Unnamed_thm
R22251:22252 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22250:22250 Coq.Numbers.BinNums <> Z ind
R22253:22253 Coq.Numbers.BinNums <> Z ind
binder 22247:22247 <> f:16
R22260:22260 Coq.Numbers.BinNums <> Z ind
binder 22257:22257 <> x:17
R22270:22273 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22268:22268 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22264:22264 VC.Verif_sumarray <> f:16 var
R22266:22266 VC.Verif_sumarray <> x:17 var
R22274:22280 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R22284:22285 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R22283:22283 Coq.Numbers.BinNums <> Z ind
binder 22281:22281 <> i:18
R22290:22290 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22286:22286 VC.Verif_sumarray <> f:16 var
R22288:22288 VC.Verif_sumarray <> x:17 var
R22291:22291 VC.Verif_sumarray <> i:18 var
R25658:25660 Coq.Init.Logic <> ::type_scope:x_'='_x not
R25642:25648 Coq.ZArith.Zcomplements <> Zlength def
R25658:25660 Coq.Init.Logic <> ::type_scope:x_'='_x not
R25642:25648 Coq.ZArith.Zcomplements <> Zlength def
R26790:26800 VST.zlist.sublist <> Zlength_map thm
R26790:26800 VST.zlist.sublist <> Zlength_map thm
R26790:26800 VST.zlist.sublist <> Zlength_map thm
R26790:26800 VST.zlist.sublist <> Zlength_map thm
R26790:26800 VST.zlist.sublist <> Zlength_map thm
R27344:27344 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R27344:27344 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R27836:27848 VST.zlist.sublist <> sublist_split thm
R27856:27856 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R27836:27848 VST.zlist.sublist <> sublist_split thm
R27856:27856 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R27836:27848 VST.zlist.sublist <> sublist_split thm
R27856:27856 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R27878:27886 VC.Verif_sumarray <> sum_Z_app thm
R27878:27886 VC.Verif_sumarray <> sum_Z_app thm
R27878:27886 VC.Verif_sumarray <> sum_Z_app thm
R27898:27908 VST.zlist.sublist <> sublist_one thm
R27898:27908 VST.zlist.sublist <> sublist_one thm
R27898:27908 VST.zlist.sublist <> sublist_one thm
def 28832:28844 <> four_contents
R28849:28849 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R28851:28852 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R28854:28855 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R28857:28858 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R28860:28860 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
prf 28870:28878 <> body_main
R28882:28891 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R28912:28920 VC.Verif_sumarray <> main_spec def
R28905:28910 VC.sumarray <> f_main def
R28899:28903 VC.Verif_sumarray <> Gprog def
R28893:28897 VC.Verif_sumarray <> Vprog def
R30367:30367 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30376:30377 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30381:30382 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30396:30397 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30399:30399 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30371:30375 VC.sumarray <> _four def
R30378:30380 VST.veric.shares <> Ews def
R30383:30395 VC.Verif_sumarray <> four_contents def
R30367:30367 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30376:30377 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30381:30382 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30396:30397 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30399:30399 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30371:30375 VC.sumarray <> _four def
R30378:30380 VST.veric.shares <> Ews def
R30383:30395 VC.Verif_sumarray <> four_contents def
prf 31832:31843 <> prog_correct
R31846:31855 VST.floyd.forward <> semax_prog def
R31871:31875 VC.Verif_sumarray <> Gprog def
R31865:31869 VC.Verif_sumarray <> Vprog def
R31862:31863 Coq.Init.Datatypes <> tt constr
R31857:31860 VC.sumarray <> prog def
R31920:31932 VC.Verif_sumarray <> body_sumarray thm
R31951:31959 VC.Verif_sumarray <> body_main thm
