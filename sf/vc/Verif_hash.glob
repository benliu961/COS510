DIGEST 8d9c69905ca45dde00799183fbc4873d
FVC.Verif_hash
R399:408 VC.Preface <> <> lib
R467:485 VST.floyd.proofauto <> <> lib
R503:519 VST.floyd.library <> <> lib
R538:544 VC.hash <> <> lib
inst 566:574 <> CompSpecs
R578:586 VST.veric.compspecs <> compspecs class
R604:607 VC.hash <> prog def
def 630:634 <> Vprog
R638:645 VST.veric.mpred <> varspecs def
R661:664 VC.hash <> prog def
R691:698 VC.hints <> <> lib
R858:875 VST.msl.wand_frame <> <> lib
R893:911 VST.msl.iter_sepcon <> <> lib
R929:949 VST.floyd.reassoc_seq <> <> lib
R967:989 VST.floyd.field_at_wand <> <> lib
R1051:1060 VC.Hashfun <> <> lib
def 1319:1329 <> strcmp_spec
R1335:1342 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R1350:1352 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R1343:1349 VC.hash <> _strcmp def
R1353:1357 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1362:1364 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1368:1369 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1372:1374 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1384:1385 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1390:1392 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1396:1397 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1400:1402 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1412:1420 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1432:1433 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1445:1451 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1534:1543 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1548:1553 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1421:1424 compcert.export.Ctypesdefs <> tptr def
R1426:1431 compcert.export.Ctypesdefs <> tschar def
R1434:1437 compcert.export.Ctypesdefs <> tptr def
R1439:1444 compcert.export.Ctypesdefs <> tschar def
R1544:1547 compcert.export.Ctypesdefs <> tint def
R1365:1367 compcert.common.Values <> val ind
R1375:1378 Coq.Init.Datatypes <> list ind
R1380:1383 compcert.lib.Integers <> byte abbrev
R1393:1395 compcert.common.Values <> val ind
R1403:1406 Coq.Init.Datatypes <> list ind
R1408:1411 compcert.lib.Integers <> byte abbrev
binder 1358:1361 <> str1:1
binder 1370:1371 <> s1:2
binder 1386:1389 <> str2:3
binder 1398:1399 <> s2:4
R1452:1463 VST.floyd.canon <> ::assert:'PROP'_'()'_x not
R1464:1471 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R1476:1477 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R1482:1487 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R1472:1475 VC.Verif_hash <> str1:1 var
R1478:1481 VC.Verif_hash <> str2:3 var
R1488:1492 VST.floyd.canon <> ::assert4:'SEP'_'('_x_';'_'..'_';'_x_')' not
R1512:1513 VST.floyd.canon <> ::assert4:'SEP'_'('_x_';'_'..'_';'_x_')' not
R1533:1533 VST.floyd.canon <> ::assert4:'SEP'_'('_x_';'_'..'_';'_x_')' not
R1493:1499 VST.floyd.entailer <> cstring def
R1508:1511 VC.Verif_hash <> str1:1 var
R1505:1506 VC.Verif_hash <> s1:2 var
R1501:1503 VST.veric.shares <> Ews def
R1514:1520 VST.floyd.entailer <> cstring def
R1529:1532 VC.Verif_hash <> str2:3 var
R1526:1527 VC.Verif_hash <> s2:4 var
R1522:1524 VST.veric.shares <> Ews def
binder 1358:1361 <> str1:5
binder 1370:1371 <> s1:6
binder 1386:1389 <> str2:7
binder 1398:1399 <> s2:8
R1554:1556 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R1564:1569 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R1561:1563 compcert.lib.Integers <> int abbrev
binder 1557:1557 <> i:9
R1570:1575 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R1627:1632 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R1579:1588 compcert.lib.Integers Int eq_dec thm
R1590:1590 VC.Verif_hash <> i:9 var
R1592:1599 compcert.lib.Integers Int zero def
R1621:1624 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R1619:1620 VC.Verif_hash <> s1:6 var
R1625:1626 VC.Verif_hash <> s2:8 var
R1608:1610 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1606:1607 VC.Verif_hash <> s1:6 var
R1611:1612 VC.Verif_hash <> s2:8 var
R1633:1640 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R1647:1652 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R1641:1644 compcert.common.Values <> Vint constr
R1646:1646 VC.Verif_hash <> i:9 var
R1653:1657 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R1677:1678 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R1698:1698 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R1658:1664 VST.floyd.entailer <> cstring def
R1673:1676 VC.Verif_hash <> str1:5 var
R1670:1671 VC.Verif_hash <> s1:6 var
R1666:1668 VST.veric.shares <> Ews def
R1679:1685 VST.floyd.entailer <> cstring def
R1694:1697 VC.Verif_hash <> str2:7 var
R1691:1692 VC.Verif_hash <> s2:8 var
R1687:1689 VST.veric.shares <> Ews def
def 1713:1723 <> strcpy_spec
R1729:1736 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R1744:1746 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R1737:1743 VC.hash <> _strcpy def
R1747:1751 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1756:1758 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1762:1763 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1765:1767 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1769:1770 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1774:1776 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1780:1781 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1783:1785 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1795:1803 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1815:1816 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1828:1834 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1943:1952 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1964:1970 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R1804:1807 compcert.export.Ctypesdefs <> tptr def
R1809:1814 compcert.export.Ctypesdefs <> tschar def
R1817:1820 compcert.export.Ctypesdefs <> tptr def
R1822:1827 compcert.export.Ctypesdefs <> tschar def
R1953:1956 compcert.export.Ctypesdefs <> tptr def
R1958:1963 compcert.export.Ctypesdefs <> tschar def
R1759:1761 compcert.common.Values <> val ind
R1768:1768 Coq.Numbers.BinNums <> Z ind
R1777:1779 compcert.common.Values <> val ind
R1786:1789 Coq.Init.Datatypes <> list ind
R1791:1794 compcert.lib.Integers <> byte abbrev
binder 1752:1755 <> dest:10
binder 1764:1764 <> n:11
binder 1771:1773 <> src:12
binder 1782:1782 <> s:13
R1835:1840 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R1854:1859 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R1850:1852 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R1841:1847 Coq.ZArith.Zcomplements <> Zlength def
R1849:1849 VC.Verif_hash <> s:13 var
R1853:1853 VC.Verif_hash <> n:11 var
R1860:1867 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R1872:1873 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R1877:1882 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R1868:1871 VC.Verif_hash <> dest:10 var
R1874:1876 VC.Verif_hash <> src:12 var
R1883:1887 VST.floyd.canon <> ::assert4:'SEP'_'('_x_';'_'..'_';'_x_')' not
R1923:1924 VST.floyd.canon <> ::assert4:'SEP'_'('_x_';'_'..'_';'_x_')' not
R1942:1942 VST.floyd.canon <> ::assert4:'SEP'_'('_x_';'_'..'_';'_x_')' not
R1888:1895 VST.floyd.field_at <> data_at_ def
R1897:1899 VST.veric.shares <> Ews def
R1902:1907 compcert.export.Ctypesdefs <> tarray def
R1909:1914 compcert.export.Ctypesdefs <> tschar def
R1916:1916 VC.Verif_hash <> n:11 var
R1919:1922 VC.Verif_hash <> dest:10 var
R1925:1931 VST.floyd.entailer <> cstring def
R1939:1941 VC.Verif_hash <> src:12 var
R1937:1937 VC.Verif_hash <> s:13 var
R1933:1935 VST.veric.shares <> Ews def
binder 1752:1755 <> dest:14
binder 1764:1764 <> n:15
binder 1771:1773 <> src:16
binder 1782:1782 <> s:17
R1971:1982 VST.floyd.canon <> ::assert:'PROP'_'()'_x not
R1983:1990 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R1995:2000 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R1991:1994 VC.Verif_hash <> dest:14 var
R2001:2005 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R2027:2028 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R2046:2046 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R2006:2013 VST.floyd.entailer <> cstringn def
R2023:2026 VC.Verif_hash <> dest:14 var
R2021:2021 VC.Verif_hash <> n:15 var
R2019:2019 VC.Verif_hash <> s:17 var
R2015:2017 VST.veric.shares <> Ews def
R2029:2035 VST.floyd.entailer <> cstring def
R2043:2045 VC.Verif_hash <> src:16 var
R2041:2041 VC.Verif_hash <> s:17 var
R2037:2039 VST.veric.shares <> Ews def
def 2061:2071 <> strlen_spec
R2077:2084 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R2092:2094 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R2085:2091 VC.hash <> _strlen def
R2095:2099 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2101:2103 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2113:2114 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2118:2119 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2123:2131 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2143:2149 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2203:2212 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2219:2225 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2132:2135 compcert.export.Ctypesdefs <> tptr def
R2137:2142 compcert.export.Ctypesdefs <> tschar def
R2213:2218 VST.veric.Cop2 <> size_t def
R2104:2107 Coq.Init.Datatypes <> list ind
R2109:2112 compcert.lib.Integers <> byte abbrev
R2120:2122 compcert.common.Values <> val ind
binder 2100:2100 <> s:18
binder 2115:2117 <> str:19
R2150:2162 VST.floyd.canon <> ::assert:'PROP'_'('_')'_x not
R2163:2170 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R2174:2179 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R2171:2173 VC.Verif_hash <> str:19 var
R2180:2184 VST.floyd.canon <> ::assert4:'SEP'_'('_x_';'_'..'_';'_x_')' not
R2202:2202 VST.floyd.canon <> ::assert4:'SEP'_'('_x_';'_'..'_';'_x_')' not
R2185:2191 VST.floyd.entailer <> cstring def
R2199:2201 VC.Verif_hash <> str:19 var
R2197:2197 VC.Verif_hash <> s:18 var
R2193:2195 VST.veric.shares <> Ews def
binder 2100:2100 <> s:20
binder 2115:2117 <> str:21
R2226:2237 VST.floyd.canon <> ::assert:'PROP'_'()'_x not
R2238:2245 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R2279:2284 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R2246:2252 compcert.common.Values <> Vptrofs def
R2255:2265 compcert.lib.Integers Ptrofs repr def
R2268:2274 Coq.ZArith.Zcomplements <> Zlength def
R2276:2276 VC.Verif_hash <> s:20 var
R2285:2289 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R2307:2307 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R2290:2296 VST.floyd.entailer <> cstring def
R2304:2306 VC.Verif_hash <> str:21 var
R2302:2302 VC.Verif_hash <> s:20 var
R2298:2300 VST.veric.shares <> Ews def
def 2437:2452 <> copy_string_spec
R2461:2463 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R2456:2460 compcert.common.AST <> ident def
R2464:2470 VST.veric.mpred <> funspec ind
R2476:2483 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R2496:2497 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R2484:2495 VC.hash <> _copy_string def
R2498:2502 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2504:2505 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2509:2510 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2516:2518 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2528:2529 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2532:2533 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2541:2548 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2560:2567 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2644:2652 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2664:2671 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2549:2552 compcert.export.Ctypesdefs <> tptr def
R2554:2559 compcert.export.Ctypesdefs <> tschar def
R2653:2656 compcert.export.Ctypesdefs <> tptr def
R2658:2663 compcert.export.Ctypesdefs <> tschar def
R2506:2508 compcert.common.Values <> val ind
R2519:2522 Coq.Init.Datatypes <> list ind
R2524:2527 compcert.lib.Integers <> byte abbrev
R2534:2540 VST.veric.SeparationLogic <> globals def
binder 2503:2503 <> s:22
binder 2511:2515 <> sigma:23
binder 2530:2531 <> gv:24
R2568:2579 VST.floyd.canon <> ::assert:'PROP'_'()'_x not
R2580:2587 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R2589:2590 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R2588:2588 VC.Verif_hash <> s:22 var
R2591:2598 VST.floyd.canon <> ::assert4:'GLOBALS'_'('_x_';'_'..'_';'_x_')'_x not
R2601:2606 VST.floyd.canon <> ::assert4:'GLOBALS'_'('_x_';'_'..'_';'_x_')'_x not
R2599:2600 VC.Verif_hash <> gv:24 var
R2607:2611 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R2631:2632 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R2643:2643 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R2612:2618 VST.floyd.entailer <> cstring def
R2630:2630 VC.Verif_hash <> s:22 var
R2624:2628 VC.Verif_hash <> sigma:23 var
R2620:2622 VST.veric.shares <> Ews def
R2633:2639 VST.floyd.library <> mem_mgr defax
R2641:2642 VC.Verif_hash <> gv:24 var
binder 2503:2503 <> s:25
binder 2511:2515 <> sigma:26
binder 2530:2531 <> gv:27
R2672:2674 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R2681:2688 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R2678:2680 compcert.common.Values <> val ind
binder 2675:2675 <> p:28
R2689:2697 VST.floyd.canon <> ::assert:'PROP'_'('_')'_x not
R2698:2705 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R2707:2715 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R2706:2706 VC.Verif_hash <> p:28 var
R2716:2720 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R2740:2752 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R2772:2784 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R2839:2851 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R2862:2862 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R2721:2727 VST.floyd.entailer <> cstring def
R2739:2739 VC.Verif_hash <> s:25 var
R2733:2737 VC.Verif_hash <> sigma:26 var
R2729:2731 VST.veric.shares <> Ews def
R2753:2759 VST.floyd.entailer <> cstring def
R2771:2771 VC.Verif_hash <> p:28 var
R2765:2769 VC.Verif_hash <> sigma:26 var
R2761:2763 VST.veric.shares <> Ews def
R2785:2796 VST.floyd.library <> malloc_token defax
R2838:2838 VC.Verif_hash <> p:28 var
R2803:2808 compcert.export.Ctypesdefs <> tarray def
R2810:2815 compcert.export.Ctypesdefs <> tschar def
R2831:2833 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R2818:2824 Coq.ZArith.Zcomplements <> Zlength def
R2826:2830 VC.Verif_hash <> sigma:26 var
R2798:2800 VST.veric.shares <> Ews def
R2852:2858 VST.floyd.library <> mem_mgr defax
R2860:2861 VC.Verif_hash <> gv:27 var
def 2877:2885 <> hash_spec
R2894:2896 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R2889:2893 compcert.common.AST <> ident def
R2897:2903 VST.veric.mpred <> funspec ind
R2910:2917 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R2923:2925 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R2918:2922 VC.hash <> _hash def
R2926:2930 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2932:2933 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2937:2938 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2947:2949 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2959:2967 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2979:2991 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3062:3071 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3077:3087 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2968:2971 compcert.export.Ctypesdefs <> tptr def
R2973:2978 compcert.export.Ctypesdefs <> tschar def
R3072:3076 compcert.export.Ctypesdefs <> tuint def
R2934:2936 compcert.common.Values <> val ind
R2950:2953 Coq.Init.Datatypes <> list ind
R2955:2958 compcert.lib.Integers <> byte abbrev
binder 2931:2931 <> s:29
binder 2939:2946 <> contents:30
R2992:3010 VST.floyd.canon <> ::assert:'PROP'_'()'_x not
R3011:3018 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R3020:3031 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R3019:3019 VC.Verif_hash <> s:29 var
R3032:3038 VST.floyd.canon <> ::assert4:'SEP'_'('_x_';'_'..'_';'_x_')' not
R3061:3061 VST.floyd.canon <> ::assert4:'SEP'_'('_x_';'_'..'_';'_x_')' not
R3039:3045 VST.floyd.entailer <> cstring def
R3060:3060 VC.Verif_hash <> s:29 var
R3051:3058 VC.Verif_hash <> contents:30 var
R3047:3049 VST.veric.shares <> Ews def
binder 2931:2931 <> s:31
binder 2939:2946 <> contents:32
R3088:3096 VST.floyd.canon <> ::assert:'PROP'_'()'_x not
R3097:3104 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R3139:3148 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R3105:3108 compcert.common.Values <> Vint constr
R3111:3118 compcert.lib.Integers Int repr def
R3121:3127 VC.Hashfun <> hashfun def
R3129:3136 VC.Verif_hash <> contents:32 var
R3149:3153 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R3176:3176 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R3154:3160 VST.floyd.entailer <> cstring def
R3175:3175 VC.Verif_hash <> s:31 var
R3166:3173 VC.Verif_hash <> contents:32 var
R3162:3164 VST.veric.shares <> Ews def
def 3374:3378 <> tcell
R3383:3389 compcert.cfrontend.Ctypes <> Tstruct constr
R3391:3395 VC.hash <> _cell def
R3397:3402 compcert.cfrontend.Ctypes <> noattr def
def 3416:3425 <> thashtable
R3430:3436 compcert.cfrontend.Ctypes <> Tstruct constr
R3438:3447 VC.hash <> _hashtable def
R3449:3454 compcert.cfrontend.Ctypes <> noattr def
def 3931:3939 <> list_cell
R3947:3950 Coq.Init.Datatypes <> list ind
R3952:3955 compcert.lib.Integers <> byte abbrev
binder 3942:3944 <> key:33
R3966:3966 Coq.Numbers.BinNums <> Z ind
binder 3959:3963 <> count:34
R3976:3978 compcert.common.Values <> val ind
binder 3970:3973 <> next:35
R3985:3987 compcert.common.Values <> val ind
binder 3982:3982 <> p:36
R3991:3995 VST.veric.mpred <> mpred def
R4001:4003 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R4011:4012 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R4008:4010 compcert.common.Values <> val ind
binder 4004:4005 <> kp:37
R4171:4187 VST.msl.seplog <> ::logic:x_'*'_x not
R4101:4116 VST.msl.seplog <> ::logic:x_'*'_x not
R4031:4047 VST.msl.seplog <> ::logic:x_'*'_x not
R4013:4019 VST.floyd.entailer <> cstring def
R4029:4030 VC.Verif_hash <> kp:37 var
R4025:4027 VC.Verif_hash <> key:33 var
R4021:4023 VST.veric.shares <> Ews def
R4048:4059 VST.floyd.library <> malloc_token defax
R4099:4100 VC.Verif_hash <> kp:37 var
R4066:4071 compcert.export.Ctypesdefs <> tarray def
R4073:4078 compcert.export.Ctypesdefs <> tschar def
R4092:4094 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R4081:4087 Coq.ZArith.Zcomplements <> Zlength def
R4089:4091 VC.Verif_hash <> key:33 var
R4061:4063 VST.veric.shares <> Ews def
R4117:4123 VST.floyd.field_at <> data_at def
R4125:4127 VST.veric.shares <> Ews def
R4129:4133 VC.Verif_hash <> tcell def
R4135:4135 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4138:4138 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4168:4168 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4136:4137 VC.Verif_hash <> kp:37 var
R4139:4139 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4161:4162 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4167:4167 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4140:4143 compcert.common.Values <> Vint constr
R4146:4153 compcert.lib.Integers Int repr def
R4155:4159 VC.Verif_hash <> count:34 var
R4163:4166 VC.Verif_hash <> next:35 var
R4170:4170 VC.Verif_hash <> p:36 var
R4188:4199 VST.floyd.library <> malloc_token defax
R4211:4211 VC.Verif_hash <> p:36 var
R4205:4209 VC.Verif_hash <> tcell def
R4201:4203 VST.veric.shares <> Ews def
def 4226:4246 <> list_cell_local_facts
binder 4259:4261 <> key:38
binder 4263:4267 <> count:39
binder 4269:4272 <> next:40
binder 4274:4274 <> p:41
R4303:4307 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R4277:4285 VC.Verif_hash <> list_cell def
R4287:4289 VC.Verif_hash <> key:38 var
R4291:4295 VC.Verif_hash <> count:39 var
R4297:4300 VC.Verif_hash <> next:40 var
R4302:4302 VC.Verif_hash <> p:41 var
R4308:4310 VST.msl.seplog <> ::logic:'!!'_x not
R4311:4315 VST.veric.val_lemmas <> isptr def
R4317:4317 VC.Verif_hash <> p:41 var
R4342:4350 VC.Verif_hash <> list_cell def
def 4454:4476 <> list_cell_valid_pointer
binder 4488:4490 <> key:42
binder 4492:4496 <> count:43
binder 4498:4501 <> next:44
binder 4503:4503 <> p:45
R4532:4536 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R4506:4514 VC.Verif_hash <> list_cell def
R4516:4518 VC.Verif_hash <> key:42 var
R4520:4524 VC.Verif_hash <> count:43 var
R4526:4529 VC.Verif_hash <> next:44 var
R4531:4531 VC.Verif_hash <> p:45 var
R4537:4549 VST.veric.expr <> valid_pointer def
R4551:4551 VC.Verif_hash <> p:45 var
R4576:4584 VC.Verif_hash <> list_cell def
prf 4739:4751 <> listcell_fold
binder 4761:4763 <> key:46
binder 4765:4766 <> kp:47
binder 4768:4772 <> count:48
binder 4774:4775 <> p':49
binder 4777:4777 <> p:50
R4953:4967 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R4922:4928 VST.msl.seplog <> ::logic:x_'*'_x not
R4862:4868 VST.msl.seplog <> ::logic:x_'*'_x not
R4802:4808 VST.msl.seplog <> ::logic:x_'*'_x not
R4784:4790 VST.floyd.entailer <> cstring def
R4800:4801 VC.Verif_hash <> kp:47 var
R4796:4798 VC.Verif_hash <> key:46 var
R4792:4794 VST.veric.shares <> Ews def
R4809:4820 VST.floyd.library <> malloc_token defax
R4860:4861 VC.Verif_hash <> kp:47 var
R4827:4832 compcert.export.Ctypesdefs <> tarray def
R4834:4839 compcert.export.Ctypesdefs <> tschar def
R4853:4855 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R4842:4848 Coq.ZArith.Zcomplements <> Zlength def
R4850:4852 VC.Verif_hash <> key:46 var
R4822:4824 VST.veric.shares <> Ews def
R4869:4875 VST.floyd.field_at <> data_at def
R4877:4879 VST.veric.shares <> Ews def
R4881:4885 VC.Verif_hash <> tcell def
R4887:4887 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4890:4891 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4919:4919 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4888:4889 VC.Verif_hash <> kp:47 var
R4892:4892 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4914:4915 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4918:4918 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4893:4896 compcert.common.Values <> Vint constr
R4899:4906 compcert.lib.Integers Int repr def
R4908:4912 VC.Verif_hash <> count:48 var
R4916:4917 VC.Verif_hash <> p':49 var
R4921:4921 VC.Verif_hash <> p:50 var
R4929:4940 VST.floyd.library <> malloc_token defax
R4952:4952 VC.Verif_hash <> p:50 var
R4946:4950 VC.Verif_hash <> tcell def
R4942:4944 VST.veric.shares <> Ews def
R4968:4976 VC.Verif_hash <> list_cell def
R4978:4980 VC.Verif_hash <> key:46 var
R4982:4986 VC.Verif_hash <> count:48 var
R4988:4989 VC.Verif_hash <> p':49 var
R4991:4991 VC.Verif_hash <> p:50 var
def 5051:5057 <> listrep
R5067:5070 Coq.Init.Datatypes <> list ind
R5082:5084 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R5073:5076 Coq.Init.Datatypes <> list ind
R5078:5081 compcert.lib.Integers <> byte abbrev
R5085:5085 Coq.Numbers.BinNums <> Z ind
binder 5060:5064 <> sigma:51
R5093:5095 compcert.common.Values <> val ind
binder 5090:5090 <> x:52
R5100:5104 VST.veric.mpred <> mpred def
R5116:5120 VC.Verif_hash <> sigma:51 var
R5135:5136 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R5130:5130 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5132:5132 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5134:5134 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5143:5145 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R5152:5153 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R5149:5151 compcert.common.Values <> val ind
binder 5146:5146 <> y:55
R5171:5173 VST.msl.seplog <> ::logic:x_'*'_x not
R5154:5162 VC.Verif_hash <> list_cell def
R5168:5168 VC.Verif_hash <> y:55 var
R5170:5170 VC.Verif_hash <> x:52 var
R5174:5180 VC.Verif_hash <> listrep:53 def
R5185:5185 VC.Verif_hash <> y:55 var
R5190:5192 Coq.Init.Datatypes <> nil constr
R5218:5221 VST.msl.seplog <> ::logic:x_'&&'_x not
R5202:5205 VST.msl.seplog <> ::logic:'!!'_x not
R5217:5217 VST.msl.seplog <> ::logic:'!!'_x not
R5207:5209 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5206:5206 VC.Verif_hash <> x:52 var
R5210:5216 VST.veric.base <> nullval def
R5222:5224 VST.msl.seplog <> emp meth
prf 5295:5312 <> listrep_local_prop
binder 5322:5326 <> sigma:56
binder 5328:5328 <> p:57
R5346:5358 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R5331:5337 VC.Verif_hash <> listrep def
R5339:5343 VC.Verif_hash <> sigma:56 var
R5345:5345 VC.Verif_hash <> p:57 var
R5359:5362 VST.msl.seplog <> ::logic:'!!'_x not
R5413:5413 VST.msl.seplog <> ::logic:'!!'_x not
R5383:5388 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R5412:5412 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R5363:5380 VST.veric.val_lemmas <> is_pointer_or_null def
R5382:5382 VC.Verif_hash <> p:57 var
R5398:5402 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R5390:5390 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5389:5389 VC.Verif_hash <> p:57 var
R5391:5397 VST.veric.base <> nullval def
R5408:5408 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5403:5407 VC.Verif_hash <> sigma:56 var
R5409:5411 Coq.Init.Datatypes <> nil constr
prf 5519:5539 <> listrep_valid_pointer
binder 5551:5555 <> sigma:58
binder 5557:5557 <> p:59
R5578:5582 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R5563:5569 VC.Verif_hash <> listrep def
R5571:5575 VC.Verif_hash <> sigma:58 var
R5577:5577 VC.Verif_hash <> p:59 var
R5583:5595 VST.veric.expr <> valid_pointer def
R5597:5597 VC.Verif_hash <> p:59 var
prf 5715:5726 <> listrep_fold
binder 5736:5738 <> key:60
binder 5740:5744 <> count:61
binder 5746:5747 <> p':62
binder 5749:5749 <> p:63
binder 5751:5752 <> al:64
R5798:5802 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R5782:5784 VST.msl.seplog <> ::logic:x_'*'_x not
R5758:5766 VC.Verif_hash <> list_cell def
R5768:5770 VC.Verif_hash <> key:60 var
R5772:5776 VC.Verif_hash <> count:61 var
R5778:5779 VC.Verif_hash <> p':62 var
R5781:5781 VC.Verif_hash <> p:63 var
R5785:5791 VC.Verif_hash <> listrep def
R5793:5794 VC.Verif_hash <> al:64 var
R5796:5797 VC.Verif_hash <> p':62 var
R5803:5809 VC.Verif_hash <> listrep def
R5823:5824 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R5812:5812 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5816:5816 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5822:5822 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5813:5815 VC.Verif_hash <> key:60 var
R5817:5821 VC.Verif_hash <> count:61 var
R5825:5826 VC.Verif_hash <> al:64 var
R5829:5829 VC.Verif_hash <> p:63 var
def 5951:5960 <> listboxrep
binder 5962:5963 <> al:65
binder 5965:5965 <> r:66
R5971:5973 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R5979:5980 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R5976:5978 compcert.common.Values <> val ind
binder 5974:5974 <> p:67
R6009:6011 VST.msl.seplog <> ::logic:x_'*'_x not
R5981:5987 VST.floyd.field_at <> data_at def
R5989:5991 VST.veric.shares <> Ews def
R5994:5997 compcert.export.Ctypesdefs <> tptr def
R5999:6003 VC.Verif_hash <> tcell def
R6006:6006 VC.Verif_hash <> p:67 var
R6008:6008 VC.Verif_hash <> r:66 var
R6012:6018 VC.Verif_hash <> listrep def
R6020:6021 VC.Verif_hash <> al:65 var
R6023:6023 VC.Verif_hash <> p:67 var
def 6038:6044 <> uncurry
binder 6047:6047 <> A:68
binder 6049:6049 <> B:69
binder 6051:6051 <> C:70
R6059:6062 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6058:6058 VC.Verif_hash <> A:68 var
R6064:6067 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6063:6063 VC.Verif_hash <> B:69 var
R6068:6068 VC.Verif_hash <> C:70 var
binder 6055:6055 <> f:71
R6077:6077 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R6076:6076 VC.Verif_hash <> A:68 var
R6078:6078 VC.Verif_hash <> B:69 var
binder 6072:6073 <> xy:72
R6083:6083 VC.Verif_hash <> C:70 var
R6090:6090 VC.Verif_hash <> f:71 var
R6102:6104 Coq.Init.Datatypes <> snd def
R6106:6107 VC.Verif_hash <> xy:72 var
R6093:6095 Coq.Init.Datatypes <> fst def
R6097:6098 VC.Verif_hash <> xy:72 var
def 6123:6135 <> hashtable_rep
R6148:6165 VC.Hashfun <> hashtable_contents def
binder 6138:6145 <> contents:73
R6172:6174 compcert.common.Values <> val ind
binder 6169:6169 <> p:74
R6179:6183 VST.veric.mpred <> mpred def
R6190:6192 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R6230:6235 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R6197:6200 Coq.Init.Datatypes <> list ind
R6223:6225 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R6203:6206 Coq.Init.Datatypes <> list ind
R6218:6220 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R6209:6212 Coq.Init.Datatypes <> list ind
R6214:6217 compcert.lib.Integers <> byte abbrev
R6221:6221 Coq.Numbers.BinNums <> Z ind
R6226:6228 compcert.common.Values <> val ind
binder 6193:6194 <> bl:75
R6344:6351 VST.msl.seplog <> ::logic:x_'*'_x not
R6299:6306 VST.msl.seplog <> ::logic:x_'*'_x not
R6262:6269 VST.msl.seplog <> ::logic:x_'&&'_x not
R6236:6239 VST.msl.seplog <> ::logic:'!!'_x not
R6261:6261 VST.msl.seplog <> ::logic:'!!'_x not
R6248:6250 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6240:6247 VC.Verif_hash <> contents:73 var
R6251:6253 Coq.Lists.List <> map def
R6259:6260 VC.Verif_hash <> bl:75 var
R6255:6257 Coq.Init.Datatypes <> fst def
R6270:6281 VST.floyd.library <> malloc_token defax
R6298:6298 VC.Verif_hash <> p:74 var
R6287:6296 VC.Verif_hash <> thashtable def
R6283:6285 VST.veric.shares <> Ews def
R6307:6313 VST.floyd.field_at <> data_at def
R6315:6317 VST.veric.shares <> Ews def
R6319:6328 VC.Verif_hash <> thashtable def
R6331:6333 Coq.Lists.List <> map def
R6339:6340 VC.Verif_hash <> bl:75 var
R6335:6337 Coq.Init.Datatypes <> snd def
R6343:6343 VC.Verif_hash <> p:74 var
R6352:6362 VST.msl.iter_sepcon <> iter_sepcon def
R6382:6383 VC.Verif_hash <> bl:75 var
R6365:6371 VC.Verif_hash <> uncurry def
R6373:6379 VC.Verif_hash <> listrep def
prf 6455:6479 <> hashtable_rep_local_facts
binder 6489:6496 <> contents:76
binder 6498:6498 <> p:77
R6526:6530 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R6502:6514 VC.Verif_hash <> hashtable_rep def
R6516:6523 VC.Verif_hash <> contents:76 var
R6525:6525 VC.Verif_hash <> p:77 var
R6531:6534 VST.msl.seplog <> ::logic:'!!'_x not
R6566:6566 VST.msl.seplog <> ::logic:'!!'_x not
R6542:6545 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R6535:6539 VST.veric.val_lemmas <> isptr def
R6541:6541 VC.Verif_hash <> p:77 var
R6562:6564 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6546:6552 Coq.ZArith.Zcomplements <> Zlength def
R6554:6561 VC.Verif_hash <> contents:76 var
R6565:6565 VC.Hashfun <> N def
prf 6672:6698 <> hashtable_rep_valid_pointer
binder 6708:6715 <> contents:78
binder 6717:6717 <> p:79
R6745:6749 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R6721:6733 VC.Verif_hash <> hashtable_rep def
R6735:6742 VC.Verif_hash <> contents:78 var
R6744:6744 VC.Verif_hash <> p:79 var
R6750:6762 VST.veric.expr <> valid_pointer def
R6764:6764 VC.Verif_hash <> p:79 var
def 7009:7022 <> new_table_spec
R7031:7033 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R7026:7030 compcert.common.AST <> ident def
R7034:7040 VST.veric.mpred <> funspec ind
R7046:7053 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R7064:7065 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R7054:7063 VC.hash <> _new_table def
R7066:7070 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R7073:7074 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R7082:7095 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R7145:7153 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R7169:7175 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R7154:7157 compcert.export.Ctypesdefs <> tptr def
R7159:7168 VC.Verif_hash <> thashtable def
R7075:7081 VST.veric.SeparationLogic <> globals def
binder 7071:7072 <> gv:80
R7096:7105 VST.floyd.canon <> ::assert:'PROP'_'()'_x not
R7106:7114 VST.floyd.canon <> ::assert3:'PARAMS'_'()'_x not
R7115:7122 VST.floyd.canon <> ::assert4:'GLOBALS'_'('_x_';'_'..'_';'_x_')'_x not
R7125:7129 VST.floyd.canon <> ::assert4:'GLOBALS'_'('_x_';'_'..'_';'_x_')'_x not
R7123:7124 VC.Verif_hash <> gv:80 var
R7130:7133 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7144:7144 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7134:7140 VST.floyd.library <> mem_mgr defax
R7142:7143 VC.Verif_hash <> gv:80 var
binder 7071:7072 <> gv:81
R7176:7178 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R7184:7185 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R7181:7183 compcert.common.Values <> val ind
binder 7179:7179 <> p:82
R7186:7199 VST.floyd.canon <> ::assert:'PROP'_'()'_x not
R7200:7207 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R7209:7217 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R7208:7208 VC.Verif_hash <> p:82 var
R7218:7221 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7249:7250 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7261:7261 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7222:7234 VC.Verif_hash <> hashtable_rep def
R7236:7246 VC.Hashfun <> empty_table def
R7248:7248 VC.Verif_hash <> p:82 var
R7251:7257 VST.floyd.library <> mem_mgr defax
R7259:7260 VC.Verif_hash <> gv:81 var
def 7276:7288 <> new_cell_spec
R7297:7299 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R7292:7296 compcert.common.AST <> ident def
R7300:7306 VST.veric.mpred <> funspec ind
R7312:7319 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R7329:7330 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R7320:7328 VC.hash <> _new_cell def
R7331:7335 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7337:7338 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7342:7343 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7347:7348 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7358:7359 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7365:7366 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7368:7369 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7374:7375 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7379:7380 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7383:7384 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7392:7399 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7411:7412 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7417:7418 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7429:7435 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7534:7542 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7553:7559 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7400:7403 compcert.export.Ctypesdefs <> tptr def
R7405:7410 compcert.export.Ctypesdefs <> tschar def
R7413:7416 compcert.export.Ctypesdefs <> tint def
R7419:7422 compcert.export.Ctypesdefs <> tptr def
R7424:7428 VC.Verif_hash <> tcell def
R7543:7546 compcert.export.Ctypesdefs <> tptr def
R7548:7552 VC.Verif_hash <> tcell def
R7339:7341 compcert.common.Values <> val ind
R7349:7352 Coq.Init.Datatypes <> list ind
R7354:7357 compcert.lib.Integers <> byte abbrev
R7367:7367 Coq.Numbers.BinNums <> Z ind
R7376:7378 compcert.common.Values <> val ind
R7385:7391 VST.veric.SeparationLogic <> globals def
binder 7336:7336 <> s:83
binder 7344:7346 <> key:84
binder 7360:7364 <> count:85
binder 7370:7373 <> next:86
binder 7381:7382 <> gv:87
R7436:7445 VST.floyd.canon <> ::assert:'PROP'_'()'_x not
R7446:7452 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R7454:7455 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R7477:7478 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R7483:7484 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R7453:7453 VC.Verif_hash <> s:83 var
R7456:7459 compcert.common.Values <> Vint constr
R7462:7469 compcert.lib.Integers Int repr def
R7471:7475 VC.Verif_hash <> count:85 var
R7479:7482 VC.Verif_hash <> next:86 var
R7485:7492 VST.floyd.canon <> ::assert4:'GLOBALS'_'('_x_';'_'..'_';'_x_')'_x not
R7495:7499 VST.floyd.canon <> ::assert4:'GLOBALS'_'('_x_';'_'..'_';'_x_')'_x not
R7493:7494 VC.Verif_hash <> gv:87 var
R7500:7503 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7521:7522 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7533:7533 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7504:7510 VST.floyd.entailer <> cstring def
R7520:7520 VC.Verif_hash <> s:83 var
R7516:7518 VC.Verif_hash <> key:84 var
R7512:7514 VST.veric.shares <> Ews def
R7523:7529 VST.floyd.library <> mem_mgr defax
R7531:7532 VC.Verif_hash <> gv:87 var
binder 7336:7336 <> s:88
binder 7344:7346 <> key:89
binder 7360:7364 <> count:90
binder 7370:7373 <> next:91
binder 7381:7382 <> gv:92
R7560:7562 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R7568:7569 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R7565:7567 compcert.common.Values <> val ind
binder 7563:7563 <> p:93
R7570:7583 VST.floyd.canon <> ::assert:'PROP'_'()'_x not
R7584:7590 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R7592:7600 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R7591:7591 VC.Verif_hash <> p:93 var
R7601:7604 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7631:7632 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7650:7661 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7672:7672 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7605:7613 VC.Verif_hash <> list_cell def
R7615:7617 VC.Verif_hash <> key:89 var
R7619:7623 VC.Verif_hash <> count:90 var
R7625:7628 VC.Verif_hash <> next:91 var
R7630:7630 VC.Verif_hash <> p:93 var
R7633:7639 VST.floyd.entailer <> cstring def
R7649:7649 VC.Verif_hash <> s:88 var
R7645:7647 VC.Verif_hash <> key:89 var
R7641:7643 VST.veric.shares <> Ews def
R7662:7668 VST.floyd.library <> mem_mgr defax
R7670:7671 VC.Verif_hash <> gv:92 var
def 7687:7694 <> get_spec
R7703:7705 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R7698:7702 compcert.common.AST <> ident def
R7706:7712 VST.veric.mpred <> funspec ind
R7718:7725 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R7730:7731 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R7726:7729 VC.hash <> _get def
R7732:7736 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7738:7739 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7743:7744 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7753:7754 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7773:7774 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7776:7777 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7781:7782 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7788:7790 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7800:7807 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7840:7841 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7853:7860 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7943:7951 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7957:7963 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7808:7811 compcert.export.Ctypesdefs <> tptr def
R7814:7820 compcert.cfrontend.Ctypes <> Tstruct constr
R7822:7831 VC.hash <> _hashtable def
R7833:7838 compcert.cfrontend.Ctypes <> noattr def
R7842:7845 compcert.export.Ctypesdefs <> tptr def
R7847:7852 compcert.export.Ctypesdefs <> tschar def
R7952:7956 compcert.export.Ctypesdefs <> tuint def
R7740:7742 compcert.common.Values <> val ind
R7755:7772 VC.Hashfun <> hashtable_contents def
R7778:7780 compcert.common.Values <> val ind
R7791:7794 Coq.Init.Datatypes <> list ind
R7796:7799 compcert.lib.Integers <> byte abbrev
binder 7737:7737 <> p:94
binder 7745:7752 <> contents:95
binder 7775:7775 <> s:96
binder 7783:7787 <> sigma:97
R7861:7873 VST.floyd.canon <> ::assert:'PROP'_'()'_x not
R7874:7881 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R7883:7884 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R7886:7891 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R7882:7882 VC.Verif_hash <> p:94 var
R7885:7885 VC.Verif_hash <> s:96 var
R7892:7896 VST.floyd.canon <> ::assert4:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7921:7922 VST.floyd.canon <> ::assert4:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7942:7942 VST.floyd.canon <> ::assert4:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7897:7909 VC.Verif_hash <> hashtable_rep def
R7911:7918 VC.Verif_hash <> contents:95 var
R7920:7920 VC.Verif_hash <> p:94 var
R7923:7929 VST.floyd.entailer <> cstring def
R7941:7941 VC.Verif_hash <> s:96 var
R7935:7939 VC.Verif_hash <> sigma:97 var
R7931:7933 VST.veric.shares <> Ews def
binder 7737:7737 <> p:98
binder 7745:7752 <> contents:99
binder 7775:7775 <> s:100
binder 7783:7787 <> sigma:101
R7964:7976 VST.floyd.canon <> ::assert:'PROP'_'('_')'_x not
R7977:7984 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R8031:8036 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R7985:7988 compcert.common.Values <> Vint constr
R7991:7998 compcert.lib.Integers Int repr def
R8001:8013 VC.Hashfun <> hashtable_get def
R8015:8019 VC.Verif_hash <> sigma:101 var
R8021:8028 VC.Verif_hash <> contents:99 var
R8037:8041 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8066:8067 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8087:8087 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8042:8054 VC.Verif_hash <> hashtable_rep def
R8056:8063 VC.Verif_hash <> contents:99 var
R8065:8065 VC.Verif_hash <> p:98 var
R8068:8074 VST.floyd.entailer <> cstring def
R8086:8086 VC.Verif_hash <> s:100 var
R8080:8084 VC.Verif_hash <> sigma:101 var
R8076:8078 VST.veric.shares <> Ews def
def 8102:8115 <> incr_list_spec
R8124:8126 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R8119:8123 compcert.common.AST <> ident def
R8127:8133 VST.veric.mpred <> funspec ind
R8139:8146 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R8157:8158 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R8147:8156 VC.hash <> _incr_list def
R8159:8163 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8166:8167 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8171:8172 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8175:8176 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8197:8198 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8200:8201 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8205:8212 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8218:8220 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8230:8231 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8234:8235 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8243:8250 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8268:8269 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8281:8288 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8424:8432 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8438:8446 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8251:8254 compcert.export.Ctypesdefs <> tptr def
R8257:8260 compcert.export.Ctypesdefs <> tptr def
R8262:8266 VC.Verif_hash <> tcell def
R8270:8273 compcert.export.Ctypesdefs <> tptr def
R8275:8280 compcert.export.Ctypesdefs <> tschar def
R8433:8437 compcert.export.Ctypesdefs <> tvoid def
R8168:8170 compcert.common.Values <> val ind
R8177:8180 Coq.Init.Datatypes <> list ind
R8192:8194 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R8183:8186 Coq.Init.Datatypes <> list ind
R8188:8191 compcert.lib.Integers <> byte abbrev
R8195:8195 Coq.Numbers.BinNums <> Z ind
R8202:8204 compcert.common.Values <> val ind
R8221:8224 Coq.Init.Datatypes <> list ind
R8226:8229 compcert.lib.Integers <> byte abbrev
R8236:8242 VST.veric.SeparationLogic <> globals def
binder 8164:8165 <> r0:102
binder 8173:8174 <> al:103
binder 8199:8199 <> s:104
binder 8213:8217 <> sigma:105
binder 8232:8233 <> gv:106
R8289:8294 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R8331:8337 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R8312:8314 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R8295:8302 VC.Hashfun <> list_get def
R8304:8308 VC.Verif_hash <> sigma:105 var
R8310:8311 VC.Verif_hash <> al:103 var
R8315:8330 compcert.lib.Integers Int max_unsigned def
R8338:8345 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R8348:8349 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R8351:8352 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R8346:8347 VC.Verif_hash <> r0:102 var
R8350:8350 VC.Verif_hash <> s:104 var
R8353:8360 VST.floyd.canon <> ::assert4:'GLOBALS'_'('_x_';'_'..'_';'_x_')'_x not
R8363:8368 VST.floyd.canon <> ::assert4:'GLOBALS'_'('_x_';'_'..'_';'_x_')'_x not
R8361:8362 VC.Verif_hash <> gv:106 var
R8369:8373 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8390:8391 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8411:8412 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8423:8423 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8374:8383 VC.Verif_hash <> listboxrep def
R8385:8386 VC.Verif_hash <> al:103 var
R8388:8389 VC.Verif_hash <> r0:102 var
R8392:8398 VST.floyd.entailer <> cstring def
R8410:8410 VC.Verif_hash <> s:104 var
R8404:8408 VC.Verif_hash <> sigma:105 var
R8400:8402 VST.veric.shares <> Ews def
R8413:8419 VST.floyd.library <> mem_mgr defax
R8421:8422 VC.Verif_hash <> gv:106 var
binder 8164:8165 <> r0:107
binder 8173:8174 <> al:108
binder 8199:8199 <> s:109
binder 8213:8217 <> sigma:110
binder 8232:8233 <> gv:111
R8447:8455 VST.floyd.canon <> ::assert:'PROP'_'('_')'_x not
R8456:8471 VST.floyd.canon <> ::assert3:'RETURN'_'()'_x not
R8472:8476 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8511:8524 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8544:8545 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8556:8556 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8477:8486 VC.Verif_hash <> listboxrep def
R8489:8497 VC.Hashfun <> list_incr def
R8499:8503 VC.Verif_hash <> sigma:110 var
R8505:8506 VC.Verif_hash <> al:108 var
R8509:8510 VC.Verif_hash <> r0:107 var
R8525:8531 VST.floyd.entailer <> cstring def
R8543:8543 VC.Verif_hash <> s:109 var
R8537:8541 VC.Verif_hash <> sigma:110 var
R8533:8535 VST.veric.shares <> Ews def
R8546:8552 VST.floyd.library <> mem_mgr defax
R8554:8555 VC.Verif_hash <> gv:111 var
def 8571:8579 <> incr_spec
R8588:8590 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R8583:8587 compcert.common.AST <> ident def
R8591:8597 VST.veric.mpred <> funspec ind
R8603:8610 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R8616:8617 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R8611:8615 VC.hash <> _incr def
R8618:8622 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8624:8625 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8629:8630 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8639:8640 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8659:8660 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8662:8663 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8667:8674 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8680:8682 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8692:8693 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8696:8697 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8705:8712 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8745:8746 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8758:8765 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8919:8927 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8933:8941 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8713:8716 compcert.export.Ctypesdefs <> tptr def
R8719:8725 compcert.cfrontend.Ctypes <> Tstruct constr
R8727:8736 VC.hash <> _hashtable def
R8738:8743 compcert.cfrontend.Ctypes <> noattr def
R8747:8750 compcert.export.Ctypesdefs <> tptr def
R8752:8757 compcert.export.Ctypesdefs <> tschar def
R8928:8932 compcert.export.Ctypesdefs <> tvoid def
R8626:8628 compcert.common.Values <> val ind
R8641:8658 VC.Hashfun <> hashtable_contents def
R8664:8666 compcert.common.Values <> val ind
R8683:8686 Coq.Init.Datatypes <> list ind
R8688:8691 compcert.lib.Integers <> byte abbrev
R8698:8704 VST.veric.SeparationLogic <> globals def
binder 8623:8623 <> p:112
binder 8631:8638 <> contents:113
binder 8661:8661 <> s:114
binder 8675:8679 <> sigma:115
binder 8694:8695 <> gv:116
R8766:8771 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R8819:8825 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R8800:8802 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R8772:8784 VC.Hashfun <> hashtable_get def
R8786:8790 VC.Verif_hash <> sigma:115 var
R8792:8799 VC.Verif_hash <> contents:113 var
R8803:8818 compcert.lib.Integers Int max_unsigned def
R8826:8833 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R8835:8836 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R8838:8839 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R8834:8834 VC.Verif_hash <> p:112 var
R8837:8837 VC.Verif_hash <> s:114 var
R8840:8847 VST.floyd.canon <> ::assert4:'GLOBALS'_'('_x_';'_'..'_';'_x_')'_x not
R8850:8855 VST.floyd.canon <> ::assert4:'GLOBALS'_'('_x_';'_'..'_';'_x_')'_x not
R8848:8849 VC.Verif_hash <> gv:116 var
R8856:8860 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8885:8886 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8906:8907 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8918:8918 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8861:8873 VC.Verif_hash <> hashtable_rep def
R8875:8882 VC.Verif_hash <> contents:113 var
R8884:8884 VC.Verif_hash <> p:112 var
R8887:8893 VST.floyd.entailer <> cstring def
R8905:8905 VC.Verif_hash <> s:114 var
R8899:8903 VC.Verif_hash <> sigma:115 var
R8895:8897 VST.veric.shares <> Ews def
R8908:8914 VST.floyd.library <> mem_mgr defax
R8916:8917 VC.Verif_hash <> gv:116 var
binder 8623:8623 <> p:117
binder 8631:8638 <> contents:118
binder 8661:8661 <> s:119
binder 8675:8679 <> sigma:120
binder 8694:8695 <> gv:121
R8942:8950 VST.floyd.canon <> ::assert:'PROP'_'('_')'_x not
R8951:8966 VST.floyd.canon <> ::assert3:'RETURN'_'()'_x not
R8967:8971 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R9020:9032 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R9052:9053 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R9064:9064 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8972:8984 VC.Verif_hash <> hashtable_rep def
R8987:9000 VC.Hashfun <> hashtable_incr def
R9002:9006 VC.Verif_hash <> sigma:120 var
R9009:9016 VC.Verif_hash <> contents:118 var
R9019:9019 VC.Verif_hash <> p:117 var
R9033:9039 VST.floyd.entailer <> cstring def
R9051:9051 VC.Verif_hash <> s:119 var
R9045:9049 VC.Verif_hash <> sigma:120 var
R9041:9043 VST.veric.shares <> Ews def
R9054:9060 VST.floyd.library <> mem_mgr defax
R9062:9063 VC.Verif_hash <> gv:121 var
def 9122:9126 <> Gprog
R9130:9137 VST.veric.mpred <> funspecs def
R9174:9194 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R9206:9207 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R9219:9220 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R9232:9233 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R9243:9263 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R9277:9278 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R9295:9296 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R9305:9306 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R9316:9337 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R9352:9354 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R9195:9205 VC.Verif_hash <> strcmp_spec def
R9208:9218 VC.Verif_hash <> strcpy_spec def
R9221:9231 VC.Verif_hash <> strlen_spec def
R9234:9242 VC.Verif_hash <> hash_spec def
R9264:9276 VC.Verif_hash <> new_cell_spec def
R9279:9294 VC.Verif_hash <> copy_string_spec def
R9297:9304 VC.Verif_hash <> get_spec def
R9307:9315 VC.Verif_hash <> incr_spec def
R9338:9351 VC.Verif_hash <> incr_list_spec def
R9169:9172 VC.hash <> prog def
R9174:9194 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R9206:9207 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R9219:9220 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R9232:9233 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R9243:9263 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R9277:9278 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R9295:9296 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R9305:9306 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R9316:9337 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R9352:9354 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R9195:9205 VC.Verif_hash <> strcmp_spec def
R9208:9218 VC.Verif_hash <> strcpy_spec def
R9221:9231 VC.Verif_hash <> strlen_spec def
R9234:9242 VC.Verif_hash <> hash_spec def
R9264:9276 VC.Verif_hash <> new_cell_spec def
R9279:9294 VC.Verif_hash <> copy_string_spec def
R9297:9304 VC.Verif_hash <> get_spec def
R9307:9315 VC.Verif_hash <> incr_spec def
R9338:9351 VC.Verif_hash <> incr_list_spec def
prf 9660:9668 <> body_hash
R9671:9680 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R9701:9709 VC.Verif_hash <> hash_spec def
R9694:9699 VC.hash <> f_hash def
R9688:9692 VC.Verif_hash <> Gprog def
R9682:9686 VC.Verif_hash <> Vprog def
R9742:9748 VST.floyd.entailer <> cstring def
prf 10399:10414 <> body_copy_string
R10417:10426 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R10454:10469 VC.Verif_hash <> copy_string_spec def
R10440:10452 VC.hash <> f_copy_string def
R10434:10438 VC.Verif_hash <> Gprog def
R10428:10432 VC.Verif_hash <> Vprog def
R10525:10528 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R10521:10523 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R10508:10514 Coq.ZArith.Zcomplements <> Zlength def
R10529:10547 compcert.lib.Integers Ptrofs max_unsigned def
R10525:10528 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R10521:10523 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R10508:10514 Coq.ZArith.Zcomplements <> Zlength def
R10529:10547 compcert.lib.Integers Ptrofs max_unsigned def
prf 10666:10678 <> body_new_cell
R10681:10690 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R10715:10727 VC.Verif_hash <> new_cell_spec def
R10704:10713 VC.hash <> f_new_cell def
R10698:10702 VC.Verif_hash <> Gprog def
R10692:10696 VC.Verif_hash <> Vprog def
prf 11091:11121 <> iter_sepcon_listrep_local_facts
binder 11132:11133 <> bl:122
R11168:11192 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R11136:11146 VST.msl.iter_sepcon <> iter_sepcon def
R11166:11167 VC.Verif_hash <> bl:122 var
R11149:11155 VC.Verif_hash <> uncurry def
R11157:11163 VC.Verif_hash <> listrep def
R11193:11195 VST.msl.seplog <> ::logic:'!!'_x not
R11196:11201 Coq.Lists.List <> Forall ind
R11223:11225 Coq.Lists.List <> map def
R11231:11232 VC.Verif_hash <> bl:122 var
R11227:11229 Coq.Init.Datatypes <> snd def
R11203:11220 VST.veric.val_lemmas <> is_pointer_or_null def
prf 11469:11486 <> iter_sepcon_split3
binder 11500:11500 <> A:123
R11506:11515 VST.zlist.sublist <> Inhabitant class
R11517:11517 VC.Verif_hash <> A:123 var
binder 11503:11503 <> d:124
R11524:11524 Coq.Numbers.BinNums <> Z ind
binder 11521:11521 <> i:125
R11532:11535 Coq.Init.Datatypes <> list ind
R11537:11537 VC.Verif_hash <> A:123 var
binder 11528:11529 <> al:126
R11545:11548 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11544:11544 VC.Verif_hash <> A:123 var
R11549:11553 VST.veric.mpred <> mpred def
binder 11541:11541 <> f:127
R11579:11587 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11561:11564 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R11566:11568 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R11565:11565 VC.Verif_hash <> i:125 var
R11565:11565 VC.Verif_hash <> i:125 var
R11569:11575 Coq.ZArith.Zcomplements <> Zlength def
R11577:11578 VC.Verif_hash <> al:126 var
R11605:11611 Coq.Init.Logic <> ::type_scope:x_'='_x not
R11589:11599 VST.msl.iter_sepcon <> iter_sepcon def
R11603:11604 VC.Verif_hash <> al:126 var
R11601:11601 VC.Verif_hash <> f:127 var
R11658:11664 VST.msl.seplog <> ::logic:x_'*'_x not
R11642:11644 VST.msl.seplog <> ::logic:x_'*'_x not
R11612:11622 VST.msl.iter_sepcon <> iter_sepcon def
R11627:11633 VST.zlist.sublist <> sublist def
R11639:11640 VC.Verif_hash <> al:126 var
R11637:11637 VC.Verif_hash <> i:125 var
R11624:11624 VC.Verif_hash <> f:127 var
R11645:11645 VC.Verif_hash <> f:127 var
R11648:11651 VST.zlist.sublist <> Znth def
R11655:11656 VC.Verif_hash <> al:126 var
R11653:11653 VC.Verif_hash <> i:125 var
R11665:11675 VST.msl.iter_sepcon <> iter_sepcon def
R11680:11686 VST.zlist.sublist <> sublist def
R11707:11708 VC.Verif_hash <> al:126 var
R11695:11701 Coq.ZArith.Zcomplements <> Zlength def
R11703:11704 VC.Verif_hash <> al:126 var
R11690:11690 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R11689:11689 VC.Verif_hash <> i:125 var
R11677:11677 VC.Verif_hash <> f:127 var
R11746:11757 VST.zlist.sublist <> sublist_same thm
R11762:11768 Coq.ZArith.Zcomplements <> Zlength def
R11746:11757 VST.zlist.sublist <> sublist_same thm
R11762:11768 Coq.ZArith.Zcomplements <> Zlength def
R11746:11757 VST.zlist.sublist <> sublist_same thm
R11762:11768 Coq.ZArith.Zcomplements <> Zlength def
prf 12203:12223 <> body_new_table_helper
binder 12310:12310 <> n:128
R12319:12325 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R12316:12318 VST.msl.seplog <> emp meth
R12326:12336 VST.msl.iter_sepcon <> iter_sepcon def
R12357:12362 Coq.Lists.List <> repeat def
R12378:12378 VC.Verif_hash <> n:128 var
R12364:12364 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12367:12368 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12376:12376 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12365:12366 Coq.Lists.List ListNotations ::list_scope:'['_']' not
R12369:12375 VST.veric.base <> nullval def
R12339:12345 VC.Verif_hash <> uncurry def
R12347:12353 VC.Verif_hash <> listrep def
prf 12418:12431 <> body_new_table
R12434:12443 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R12469:12482 VC.Verif_hash <> new_table_spec def
R12457:12467 VC.hash <> f_new_table def
R12451:12455 VC.Verif_hash <> Gprog def
R12445:12449 VC.Verif_hash <> Vprog def
prf 14628:14649 <> listrep_traverse_start
binder 14661:14661 <> p:129
binder 14663:14664 <> al:130
R14675:14679 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R14672:14674 VST.msl.seplog <> emp meth
R14692:14695 VST.msl.seplog <> ::logic:x_'-*'_x not
R14680:14686 VC.Verif_hash <> listrep def
R14688:14689 VC.Verif_hash <> al:130 var
R14691:14691 VC.Verif_hash <> p:129 var
R14696:14702 VC.Verif_hash <> listrep def
R14704:14705 VC.Verif_hash <> al:130 var
R14707:14707 VC.Verif_hash <> p:129 var
prf 14746:14766 <> listrep_traverse_step
binder 14778:14779 <> al:131
binder 14781:14783 <> key:132
binder 14785:14789 <> count:133
binder 14791:14792 <> p':134
binder 14794:14794 <> p:135
R14824:14834 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R14800:14808 VC.Verif_hash <> list_cell def
R14810:14812 VC.Verif_hash <> key:132 var
R14814:14818 VC.Verif_hash <> count:133 var
R14820:14821 VC.Verif_hash <> p':134 var
R14823:14823 VC.Verif_hash <> p:135 var
R14848:14851 VST.msl.seplog <> ::logic:x_'-*'_x not
R14835:14841 VC.Verif_hash <> listrep def
R14843:14844 VC.Verif_hash <> al:131 var
R14846:14847 VC.Verif_hash <> p':134 var
R14852:14858 VC.Verif_hash <> listrep def
R14873:14876 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R14861:14861 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14865:14866 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14872:14872 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14862:14864 VC.Verif_hash <> key:132 var
R14867:14871 VC.Verif_hash <> count:133 var
R14877:14878 VC.Verif_hash <> al:131 var
R14881:14881 VC.Verif_hash <> p:135 var
prf 14920:14948 <> listrep_traverse_step_example
binder 14959:14960 <> kp:136
binder 14962:14964 <> key:137
binder 14966:14970 <> count:138
binder 14972:14973 <> al:139
binder 14975:14975 <> q:140
binder 14977:14977 <> p:141
binder 14979:14980 <> b0:142
binder 14982:14983 <> p0:143
R15234:15241 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R15214:15221 VST.msl.seplog <> ::logic:x_'*'_x not
R15183:15189 VST.msl.seplog <> ::logic:x_'*'_x not
R15124:15130 VST.msl.seplog <> ::logic:x_'*'_x not
R15064:15070 VST.msl.seplog <> ::logic:x_'*'_x not
R15008:15015 VST.msl.seplog <> ::logic:x_'*'_x not
R15063:15063 VST.msl.seplog <> ::logic:x_'*'_x not
R14990:14996 VST.floyd.entailer <> cstring def
R15006:15007 VC.Verif_hash <> kp:136 var
R15002:15004 VC.Verif_hash <> key:137 var
R14998:15000 VST.veric.shares <> Ews def
R15046:15049 VST.msl.seplog <> ::logic:x_'-*'_x not
R15016:15022 VC.Verif_hash <> listrep def
R15037:15040 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R15025:15025 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15029:15030 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15036:15036 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15026:15028 VC.Verif_hash <> key:137 var
R15031:15035 VC.Verif_hash <> count:138 var
R15041:15042 VC.Verif_hash <> al:139 var
R15045:15045 VC.Verif_hash <> p:141 var
R15050:15056 VC.Verif_hash <> listrep def
R15058:15059 VC.Verif_hash <> b0:142 var
R15061:15062 VC.Verif_hash <> p0:143 var
R15071:15082 VST.floyd.library <> malloc_token defax
R15122:15123 VC.Verif_hash <> kp:136 var
R15089:15094 compcert.export.Ctypesdefs <> tarray def
R15096:15101 compcert.export.Ctypesdefs <> tschar def
R15115:15117 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R15104:15110 Coq.ZArith.Zcomplements <> Zlength def
R15112:15114 VC.Verif_hash <> key:137 var
R15084:15086 VST.veric.shares <> Ews def
R15131:15137 VST.floyd.field_at <> data_at def
R15139:15141 VST.veric.shares <> Ews def
R15143:15147 VC.Verif_hash <> tcell def
R15149:15149 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15152:15153 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15180:15180 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15150:15151 VC.Verif_hash <> kp:136 var
R15154:15154 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15176:15177 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15179:15179 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R15155:15158 compcert.common.Values <> Vint constr
R15161:15168 compcert.lib.Integers Int repr def
R15170:15174 VC.Verif_hash <> count:138 var
R15178:15178 VC.Verif_hash <> q:140 var
R15182:15182 VC.Verif_hash <> p:141 var
R15190:15201 VST.floyd.library <> malloc_token defax
R15213:15213 VC.Verif_hash <> p:141 var
R15207:15211 VC.Verif_hash <> tcell def
R15203:15205 VST.veric.shares <> Ews def
R15222:15228 VC.Verif_hash <> listrep def
R15230:15231 VC.Verif_hash <> al:139 var
R15233:15233 VC.Verif_hash <> q:140 var
R15242:15248 VC.Verif_hash <> listrep def
R15250:15251 VC.Verif_hash <> b0:142 var
R15253:15254 VC.Verif_hash <> p0:143 var
prf 15437:15459 <> listrep_traverse_finish
binder 15470:15471 <> al:144
binder 15473:15473 <> p:145
R15540:15546 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R15498:15503 VST.msl.seplog <> ::logic:x_'*'_x not
R15539:15539 VST.msl.seplog <> ::logic:x_'*'_x not
R15479:15485 VC.Verif_hash <> listrep def
R15487:15489 Coq.Init.Datatypes <> nil constr
R15491:15497 VST.veric.base <> nullval def
R15523:15526 VST.msl.seplog <> ::logic:x_'-*'_x not
R15504:15510 VC.Verif_hash <> listrep def
R15512:15514 Coq.Init.Datatypes <> nil constr
R15516:15522 VST.veric.base <> nullval def
R15527:15533 VC.Verif_hash <> listrep def
R15535:15536 VC.Verif_hash <> al:144 var
R15538:15538 VC.Verif_hash <> p:145 var
R15547:15553 VC.Verif_hash <> listrep def
R15555:15556 VC.Verif_hash <> al:144 var
R15558:15558 VC.Verif_hash <> p:145 var
prf 15718:15725 <> body_get
R15728:15737 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R15757:15764 VC.Verif_hash <> get_spec def
R15751:15755 VC.hash <> f_get def
R15745:15749 VC.Verif_hash <> Gprog def
R15739:15743 VC.Verif_hash <> Vprog def
R15823:15837 VC.Hashfun <> hashfun_inrange prfax
R15823:15837 VC.Hashfun <> hashfun_inrange prfax
R15855:15864 VST.floyd.client_lemmas <> abbreviate def
R16048:16057 VST.floyd.forward <> seq_assoc1 thm
R16077:16079 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R16117:16121 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R16084:16087 Coq.Init.Datatypes <> list ind
R16110:16112 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R16090:16093 Coq.Init.Datatypes <> list ind
R16105:16107 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R16096:16099 Coq.Init.Datatypes <> list ind
R16101:16104 compcert.lib.Integers <> byte abbrev
R16108:16108 Coq.Numbers.BinNums <> Z ind
R16113:16115 compcert.common.Values <> val ind
binder 16080:16082 <> cts:146
R16122:16127 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R16150:16155 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R16136:16138 Coq.Init.Logic <> ::type_scope:x_'='_x not
R16139:16141 Coq.Lists.List <> map def
R16147:16149 VC.Verif_hash <> cts:146 var
R16143:16145 Coq.Init.Datatypes <> fst def
R16156:16162 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R16204:16214 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R16232:16234 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R16244:16248 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R16163:16166 VST.floyd.canon <> temp constr
R16168:16169 VC.hash <> _h def
R16172:16175 compcert.common.Values <> Vint constr
R16178:16185 compcert.lib.Integers Int repr def
R16188:16194 VC.Hashfun <> hashfun def
R16215:16218 VST.floyd.canon <> temp constr
R16220:16225 VC.hash <> _table def
R16235:16238 VST.floyd.canon <> temp constr
R16240:16241 VC.hash <> _s def
R16249:16253 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R16273:16274 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R16308:16317 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R16360:16369 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R16403:16403 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R16254:16260 VST.floyd.entailer <> cstring def
R16262:16264 VST.veric.shares <> Ews def
R16275:16286 VST.floyd.library <> malloc_token defax
R16292:16301 VC.Verif_hash <> thashtable def
R16288:16290 VST.veric.shares <> Ews def
R16318:16324 VST.floyd.field_at <> data_at def
R16326:16328 VST.veric.shares <> Ews def
R16330:16339 VC.Verif_hash <> thashtable def
R16342:16344 Coq.Lists.List <> map def
R16350:16352 VC.Verif_hash <> cts:146 var
R16346:16348 Coq.Init.Datatypes <> snd def
R16370:16380 VST.msl.iter_sepcon <> iter_sepcon def
R16400:16402 VC.Verif_hash <> cts:146 var
R16383:16389 VC.Verif_hash <> uncurry def
R16391:16397 VC.Verif_hash <> listrep def
R16048:16057 VST.floyd.forward <> seq_assoc1 thm
R16077:16079 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R16117:16121 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R16084:16087 Coq.Init.Datatypes <> list ind
R16110:16112 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R16090:16093 Coq.Init.Datatypes <> list ind
R16105:16107 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R16096:16099 Coq.Init.Datatypes <> list ind
R16101:16104 compcert.lib.Integers <> byte abbrev
R16108:16108 Coq.Numbers.BinNums <> Z ind
R16113:16115 compcert.common.Values <> val ind
binder 16080:16082 <> cts:147
R16122:16127 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R16150:16155 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R16136:16138 Coq.Init.Logic <> ::type_scope:x_'='_x not
R16139:16141 Coq.Lists.List <> map def
R16147:16149 VC.Verif_hash <> cts:147 var
R16143:16145 Coq.Init.Datatypes <> fst def
R16156:16162 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R16204:16214 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R16232:16234 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R16244:16248 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R16163:16166 VST.floyd.canon <> temp constr
R16168:16169 VC.hash <> _h def
R16172:16175 compcert.common.Values <> Vint constr
R16178:16185 compcert.lib.Integers Int repr def
R16188:16194 VC.Hashfun <> hashfun def
R16215:16218 VST.floyd.canon <> temp constr
R16220:16225 VC.hash <> _table def
R16235:16238 VST.floyd.canon <> temp constr
R16240:16241 VC.hash <> _s def
R16249:16253 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R16273:16274 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R16308:16317 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R16360:16369 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R16403:16403 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R16254:16260 VST.floyd.entailer <> cstring def
R16262:16264 VST.veric.shares <> Ews def
R16275:16286 VST.floyd.library <> malloc_token defax
R16292:16301 VC.Verif_hash <> thashtable def
R16288:16290 VST.veric.shares <> Ews def
R16318:16324 VST.floyd.field_at <> data_at def
R16326:16328 VST.veric.shares <> Ews def
R16330:16339 VC.Verif_hash <> thashtable def
R16342:16344 Coq.Lists.List <> map def
R16350:16352 VC.Verif_hash <> cts:147 var
R16346:16348 Coq.Init.Datatypes <> snd def
R16370:16380 VST.msl.iter_sepcon <> iter_sepcon def
R16400:16402 VC.Verif_hash <> cts:147 var
R16383:16389 VC.Verif_hash <> uncurry def
R16391:16397 VC.Verif_hash <> listrep def
R16703:16706 VC.Hashfun <> N_eq thm
R16703:16706 VC.Hashfun <> N_eq thm
R16703:16706 VC.Hashfun <> N_eq thm
R16907:16910 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R16930:16932 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R16924:16928 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R16911:16917 VC.Hashfun <> hashfun def
R16929:16929 VC.Hashfun <> N def
R16924:16928 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R16911:16917 VC.Hashfun <> hashfun def
R16929:16929 VC.Hashfun <> N def
R16933:16933 VC.Hashfun <> N def
R16907:16910 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R16930:16932 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R16924:16928 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R16911:16917 VC.Hashfun <> hashfun def
R16929:16929 VC.Hashfun <> N def
R16924:16928 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R16911:16917 VC.Hashfun <> hashfun def
R16929:16929 VC.Hashfun <> N def
R16933:16933 VC.Hashfun <> N def
R17128:17130 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17117:17123 Coq.ZArith.Zcomplements <> Zlength def
R17131:17131 VC.Hashfun <> N def
R17128:17130 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17117:17123 Coq.ZArith.Zcomplements <> Zlength def
R17131:17131 VC.Hashfun <> N def
R17871:17875 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R17858:17864 VC.Hashfun <> hashfun def
R17876:17876 VC.Hashfun <> N def
R17871:17875 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R17858:17864 VC.Hashfun <> hashfun def
R17876:17876 VC.Hashfun <> N def
R18027:18035 VST.floyd.canon <> semax_pre thm
R18059:18069 VST.floyd.canon <> :::'PROP'_'('_')'_x not
R18070:18076 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R18103:18104 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R18114:18119 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R18077:18080 VST.floyd.canon <> temp constr
R18082:18083 VC.hash <> _p def
R18086:18088 Coq.Init.Datatypes <> snd def
R18091:18094 VST.zlist.sublist <> Znth def
R18105:18108 VST.floyd.canon <> temp constr
R18110:18111 VC.hash <> _s def
R18120:18124 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R18144:18145 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R18179:18188 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R18231:18240 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R18288:18297 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R18343:18352 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R18418:18418 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R18125:18131 VST.floyd.entailer <> cstring def
R18133:18135 VST.veric.shares <> Ews def
R18146:18157 VST.floyd.library <> malloc_token defax
R18163:18172 VC.Verif_hash <> thashtable def
R18159:18161 VST.veric.shares <> Ews def
R18189:18195 VST.floyd.field_at <> data_at def
R18197:18199 VST.veric.shares <> Ews def
R18201:18210 VC.Verif_hash <> thashtable def
R18213:18215 Coq.Lists.List <> map def
R18217:18219 Coq.Init.Datatypes <> snd def
R18241:18251 VST.msl.iter_sepcon <> iter_sepcon def
R18272:18278 VST.zlist.sublist <> sublist def
R18254:18260 VC.Verif_hash <> uncurry def
R18262:18268 VC.Verif_hash <> listrep def
R18298:18304 VC.Verif_hash <> listrep def
R18307:18309 Coq.Init.Datatypes <> fst def
R18312:18315 VST.zlist.sublist <> Znth def
R18326:18328 Coq.Init.Datatypes <> snd def
R18331:18334 VST.zlist.sublist <> Znth def
R18353:18363 VST.msl.iter_sepcon <> iter_sepcon def
R18384:18390 VST.zlist.sublist <> sublist def
R18401:18407 Coq.ZArith.Zcomplements <> Zlength def
R18394:18396 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R18366:18372 VC.Verif_hash <> uncurry def
R18374:18380 VC.Verif_hash <> listrep def
R18027:18035 VST.floyd.canon <> semax_pre thm
R18059:18069 VST.floyd.canon <> :::'PROP'_'('_')'_x not
R18070:18076 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R18103:18104 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R18114:18119 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R18077:18080 VST.floyd.canon <> temp constr
R18082:18083 VC.hash <> _p def
R18086:18088 Coq.Init.Datatypes <> snd def
R18091:18094 VST.zlist.sublist <> Znth def
R18105:18108 VST.floyd.canon <> temp constr
R18110:18111 VC.hash <> _s def
R18120:18124 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R18144:18145 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R18179:18188 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R18231:18240 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R18288:18297 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R18343:18352 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R18418:18418 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R18125:18131 VST.floyd.entailer <> cstring def
R18133:18135 VST.veric.shares <> Ews def
R18146:18157 VST.floyd.library <> malloc_token defax
R18163:18172 VC.Verif_hash <> thashtable def
R18159:18161 VST.veric.shares <> Ews def
R18189:18195 VST.floyd.field_at <> data_at def
R18197:18199 VST.veric.shares <> Ews def
R18201:18210 VC.Verif_hash <> thashtable def
R18213:18215 Coq.Lists.List <> map def
R18217:18219 Coq.Init.Datatypes <> snd def
R18241:18251 VST.msl.iter_sepcon <> iter_sepcon def
R18272:18278 VST.zlist.sublist <> sublist def
R18254:18260 VC.Verif_hash <> uncurry def
R18262:18268 VC.Verif_hash <> listrep def
R18298:18304 VC.Verif_hash <> listrep def
R18307:18309 Coq.Init.Datatypes <> fst def
R18312:18315 VST.zlist.sublist <> Znth def
R18326:18328 Coq.Init.Datatypes <> snd def
R18331:18334 VST.zlist.sublist <> Znth def
R18353:18363 VST.msl.iter_sepcon <> iter_sepcon def
R18384:18390 VST.zlist.sublist <> sublist def
R18401:18407 Coq.ZArith.Zcomplements <> Zlength def
R18394:18396 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R18366:18372 VC.Verif_hash <> uncurry def
R18374:18380 VC.Verif_hash <> listrep def
R18467:18470 VST.zlist.sublist <> Znth def
R18467:18470 VST.zlist.sublist <> Znth def
R19261:19272 VST.floyd.library <> malloc_token defax
R19286:19292 VST.floyd.field_at <> data_at def
R19315:19325 VST.msl.iter_sepcon <> iter_sepcon def
R19333:19343 VST.msl.iter_sepcon <> iter_sepcon def
R19261:19272 VST.floyd.library <> malloc_token defax
R19286:19292 VST.floyd.field_at <> data_at def
R19315:19325 VST.msl.iter_sepcon <> iter_sepcon def
R19333:19343 VST.msl.iter_sepcon <> iter_sepcon def
R19470:19472 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R19496:19497 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R19476:19479 Coq.Init.Datatypes <> list ind
R19491:19493 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R19482:19485 Coq.Init.Datatypes <> list ind
R19487:19490 compcert.lib.Integers <> byte abbrev
R19494:19494 Coq.Numbers.BinNums <> Z ind
binder 19473:19473 <> b:148
R19498:19500 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R19507:19512 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R19504:19506 compcert.common.Values <> val ind
binder 19501:19501 <> p:149
R19513:19776 VST.floyd.canon <> :::'PROP'_'('_')'_x not
R19777:19783 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R19793:19794 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R19804:19809 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R19784:19787 VST.floyd.canon <> temp constr
R19789:19790 VC.hash <> _p def
R19792:19792 VC.Verif_hash <> p:149 var
R19795:19798 VST.floyd.canon <> temp constr
R19800:19801 VC.hash <> _s def
R19810:19814 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R19823:19824 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R19844:20115 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R19815:19818 VST.floyd.freezer <> FRZL abbrev
R19825:19831 VST.floyd.entailer <> cstring def
R19833:19835 VST.veric.shares <> Ews def
R19470:19472 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R19496:19497 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R19476:19479 Coq.Init.Datatypes <> list ind
R19491:19493 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R19482:19485 Coq.Init.Datatypes <> list ind
R19487:19490 compcert.lib.Integers <> byte abbrev
R19494:19494 Coq.Numbers.BinNums <> Z ind
binder 19473:19473 <> b:150
R19498:19500 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R19507:19512 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R19504:19506 compcert.common.Values <> val ind
binder 19501:19501 <> p:151
R19513:19776 VST.floyd.canon <> :::'PROP'_'('_')'_x not
R19777:19783 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R19793:19794 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R19804:19809 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R19784:19787 VST.floyd.canon <> temp constr
R19789:19790 VC.hash <> _p def
R19792:19792 VC.Verif_hash <> p:151 var
R19795:19798 VST.floyd.canon <> temp constr
R19800:19801 VC.hash <> _s def
R19810:19814 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R19823:19824 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R19844:20115 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R19815:19818 VST.floyd.freezer <> FRZL abbrev
R19825:19831 VST.floyd.entailer <> cstring def
R19833:19835 VST.veric.shares <> Ews def
R20936:20940 Coq.Init.Logic <> False ind
R20936:20940 Coq.Init.Logic <> False ind
R22880:22889 VC.Verif_hash <> listboxrep def
prf 25577:25595 <> listboxrep_traverse
binder 25607:25607 <> p:152
binder 25609:25610 <> kp:153
binder 25612:25614 <> key:154
binder 25616:25620 <> count:155
binder 25622:25622 <> r:156
R26057:26071 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R26021:26028 VST.msl.seplog <> ::logic:x_'*'_x not
R25989:25996 VST.msl.seplog <> ::logic:x_'*'_x not
R25834:25841 VST.msl.seplog <> ::logic:x_'*'_x not
R25761:25768 VST.msl.seplog <> ::logic:x_'*'_x not
R25711:25718 VST.msl.seplog <> ::logic:x_'*'_x not
R25649:25657 VST.msl.seplog <> ::logic:x_'*'_x not
R25631:25637 VST.floyd.entailer <> cstring def
R25647:25648 VC.Verif_hash <> kp:153 var
R25643:25645 VC.Verif_hash <> key:154 var
R25639:25641 VST.veric.shares <> Ews def
R25658:25669 VST.floyd.library <> malloc_token defax
R25709:25710 VC.Verif_hash <> kp:153 var
R25676:25681 compcert.export.Ctypesdefs <> tarray def
R25683:25688 compcert.export.Ctypesdefs <> tschar def
R25702:25704 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R25691:25697 Coq.ZArith.Zcomplements <> Zlength def
R25699:25701 VC.Verif_hash <> key:154 var
R25671:25673 VST.veric.shares <> Ews def
R25719:25726 VST.floyd.field_at <> field_at def
R25728:25730 VST.veric.shares <> Ews def
R25732:25736 VC.Verif_hash <> tcell def
R25738:25738 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R25755:25755 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R25739:25749 VST.floyd.nested_field_lemmas <> StructField constr
R25751:25754 VC.hash <> _key def
R25757:25758 VC.Verif_hash <> kp:153 var
R25760:25760 VC.Verif_hash <> p:152 var
R25769:25776 VST.floyd.field_at <> field_at def
R25778:25780 VST.veric.shares <> Ews def
R25782:25786 VC.Verif_hash <> tcell def
R25788:25788 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R25807:25807 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R25789:25799 VST.floyd.nested_field_lemmas <> StructField constr
R25801:25806 VC.hash <> _count def
R25810:25813 compcert.common.Values <> Vint constr
R25816:25823 compcert.lib.Integers Int repr def
R25825:25829 VC.Verif_hash <> count:155 var
R25833:25833 VC.Verif_hash <> p:152 var
R25842:25847 VST.floyd.mapsto_memory_block <> spacer def
R25849:25851 VST.veric.shares <> Ews def
R25900:25902 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R25854:25872 VST.floyd.nested_field_lemmas <> nested_field_offset def
R25880:25880 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R25899:25899 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R25881:25891 VST.floyd.nested_field_lemmas <> StructField constr
R25893:25898 VC.hash <> _count def
R25874:25878 VC.Verif_hash <> tcell def
R25903:25908 VST.veric.expr <> sizeof def
R25910:25914 compcert.export.Ctypesdefs <> tuint def
R25941:25959 VST.floyd.nested_field_lemmas <> nested_field_offset def
R25967:25967 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R25985:25985 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R25968:25978 VST.floyd.nested_field_lemmas <> StructField constr
R25980:25984 VC.hash <> _next def
R25961:25965 VC.Verif_hash <> tcell def
R25988:25988 VC.Verif_hash <> p:152 var
R25997:26008 VST.floyd.library <> malloc_token defax
R26020:26020 VC.Verif_hash <> p:152 var
R26014:26018 VC.Verif_hash <> tcell def
R26010:26012 VST.veric.shares <> Ews def
R26029:26035 VST.floyd.field_at <> data_at def
R26037:26039 VST.veric.shares <> Ews def
R26042:26045 compcert.export.Ctypesdefs <> tptr def
R26047:26051 VC.Verif_hash <> tcell def
R26054:26054 VC.Verif_hash <> p:152 var
R26056:26056 VC.Verif_hash <> r:156 var
R26072:26075 VST.msl.seplog <> ::logic:'ALL'_x_'..'_x_','_x not
R26100:26109 VST.msl.seplog <> ::logic:'ALL'_x_'..'_x_','_x not
R26080:26083 Coq.Init.Datatypes <> list ind
R26095:26097 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R26086:26089 Coq.Init.Datatypes <> list ind
R26091:26094 compcert.lib.Integers <> byte abbrev
R26098:26098 Coq.Numbers.BinNums <> Z ind
binder 26076:26077 <> dl:157
R26167:26177 VST.msl.seplog <> ::logic:x_'-*'_x not
R26110:26119 VC.Verif_hash <> listboxrep def
R26121:26122 VC.Verif_hash <> dl:157 var
R26125:26137 VST.floyd.nested_field_lemmas <> field_address def
R26139:26143 VC.Verif_hash <> tcell def
R26145:26145 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R26163:26163 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R26146:26156 VST.floyd.nested_field_lemmas <> StructField constr
R26158:26162 VC.hash <> _next def
R26165:26165 VC.Verif_hash <> p:152 var
R26178:26187 VC.Verif_hash <> listboxrep def
R26202:26205 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R26190:26190 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26194:26195 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26201:26201 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26191:26193 VC.Verif_hash <> key:154 var
R26196:26200 VC.Verif_hash <> count:155 var
R26206:26207 VC.Verif_hash <> dl:157 var
R26210:26210 VC.Verif_hash <> r:156 var
R26253:26262 VST.msl.seplog <> allp_right meth
R26253:26262 VST.msl.seplog <> allp_right meth
R26285:26303 VST.msl.seplog <> wand_sepcon_adjoint meth
R26285:26303 VST.msl.seplog <> wand_sepcon_adjoint meth
R26831:26846 VST.floyd.field_at <> field_at_data_at thm
R26848:26850 VST.veric.shares <> Ews def
R26852:26856 VC.Verif_hash <> tcell def
R26858:26858 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R26876:26876 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R26859:26869 VST.floyd.nested_field_lemmas <> StructField constr
R26871:26875 VC.hash <> _next def
R27091:27107 VST.floyd.nested_field_lemmas <> nested_field_type def
R27115:27115 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R27133:27133 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R27116:27126 VST.floyd.nested_field_lemmas <> StructField constr
R27128:27132 VC.hash <> _next def
R27109:27113 VC.Verif_hash <> tcell def
prf 27359:27379 <> listboxrep_traverse32
binder 27391:27391 <> p:158
binder 27393:27394 <> kp:159
binder 27396:27398 <> key:160
binder 27400:27404 <> count:161
binder 27406:27406 <> r:162
R27434:27442 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R27426:27428 Coq.Init.Logic <> ::type_scope:x_'='_x not
R27415:27425 compcert.aarch64.Archi <> ptr64 def
R27429:27433 Coq.Init.Datatypes <> false constr
R27714:27728 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R27678:27685 VST.msl.seplog <> ::logic:x_'*'_x not
R27646:27653 VST.msl.seplog <> ::logic:x_'*'_x not
R27573:27580 VST.msl.seplog <> ::logic:x_'*'_x not
R27523:27530 VST.msl.seplog <> ::logic:x_'*'_x not
R27461:27469 VST.msl.seplog <> ::logic:x_'*'_x not
R27443:27449 VST.floyd.entailer <> cstring def
R27459:27460 VC.Verif_hash <> kp:159 var
R27455:27457 VC.Verif_hash <> key:160 var
R27451:27453 VST.veric.shares <> Ews def
R27470:27481 VST.floyd.library <> malloc_token defax
R27521:27522 VC.Verif_hash <> kp:159 var
R27488:27493 compcert.export.Ctypesdefs <> tarray def
R27495:27500 compcert.export.Ctypesdefs <> tschar def
R27514:27516 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R27503:27509 Coq.ZArith.Zcomplements <> Zlength def
R27511:27513 VC.Verif_hash <> key:160 var
R27483:27485 VST.veric.shares <> Ews def
R27531:27538 VST.floyd.field_at <> field_at def
R27540:27542 VST.veric.shares <> Ews def
R27544:27548 VC.Verif_hash <> tcell def
R27550:27550 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R27567:27567 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R27551:27561 VST.floyd.nested_field_lemmas <> StructField constr
R27563:27566 VC.hash <> _key def
R27569:27570 VC.Verif_hash <> kp:159 var
R27572:27572 VC.Verif_hash <> p:158 var
R27581:27588 VST.floyd.field_at <> field_at def
R27590:27592 VST.veric.shares <> Ews def
R27594:27598 VC.Verif_hash <> tcell def
R27600:27600 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R27619:27619 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R27601:27611 VST.floyd.nested_field_lemmas <> StructField constr
R27613:27618 VC.hash <> _count def
R27622:27625 compcert.common.Values <> Vint constr
R27628:27635 compcert.lib.Integers Int repr def
R27637:27641 VC.Verif_hash <> count:161 var
R27645:27645 VC.Verif_hash <> p:158 var
R27654:27665 VST.floyd.library <> malloc_token defax
R27677:27677 VC.Verif_hash <> p:158 var
R27671:27675 VC.Verif_hash <> tcell def
R27667:27669 VST.veric.shares <> Ews def
R27686:27692 VST.floyd.field_at <> data_at def
R27694:27696 VST.veric.shares <> Ews def
R27699:27702 compcert.export.Ctypesdefs <> tptr def
R27704:27708 VC.Verif_hash <> tcell def
R27711:27711 VC.Verif_hash <> p:158 var
R27713:27713 VC.Verif_hash <> r:162 var
R27729:27732 VST.msl.seplog <> ::logic:'ALL'_x_'..'_x_','_x not
R27757:27766 VST.msl.seplog <> ::logic:'ALL'_x_'..'_x_','_x not
R27737:27740 Coq.Init.Datatypes <> list ind
R27752:27754 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R27743:27746 Coq.Init.Datatypes <> list ind
R27748:27751 compcert.lib.Integers <> byte abbrev
R27755:27755 Coq.Numbers.BinNums <> Z ind
binder 27733:27734 <> dl:163
R27824:27834 VST.msl.seplog <> ::logic:x_'-*'_x not
R27767:27776 VC.Verif_hash <> listboxrep def
R27778:27779 VC.Verif_hash <> dl:163 var
R27782:27794 VST.floyd.nested_field_lemmas <> field_address def
R27796:27800 VC.Verif_hash <> tcell def
R27802:27802 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R27820:27820 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R27803:27813 VST.floyd.nested_field_lemmas <> StructField constr
R27815:27819 VC.hash <> _next def
R27822:27822 VC.Verif_hash <> p:158 var
R27835:27844 VC.Verif_hash <> listboxrep def
R27859:27862 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R27847:27847 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27851:27852 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27858:27858 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27848:27850 VC.Verif_hash <> key:160 var
R27853:27857 VC.Verif_hash <> count:161 var
R27863:27864 VC.Verif_hash <> dl:163 var
R27867:27867 VC.Verif_hash <> r:162 var
R27985:27997 VST.msl.seplog <> derives_trans meth
R28011:28029 VC.Verif_hash <> listboxrep_traverse prfax
R28059:28064 VST.floyd.mapsto_memory_block <> spacer def
prf 28152:28165 <> body_incr_list
R28168:28177 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R28203:28216 VC.Verif_hash <> incr_list_spec def
R28191:28201 VC.hash <> f_incr_list def
R28185:28189 VC.Verif_hash <> Gprog def
R28179:28183 VC.Verif_hash <> Vprog def
prf 29314:29333 <> example_split_struct
binder 29344:29344 <> p:164
R29354:29356 compcert.common.Values <> val ind
binder 29347:29347 <> x:165
binder 29349:29349 <> y:166
binder 29351:29351 <> z:167
R29396:29403 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29367:29373 VST.floyd.field_at <> data_at def
R29375:29377 VST.veric.shares <> Ews def
R29379:29383 VC.Verif_hash <> tcell def
R29385:29385 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29387:29387 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29393:29393 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29386:29386 VC.Verif_hash <> x:165 var
R29388:29388 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29390:29390 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29392:29392 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29389:29389 VC.Verif_hash <> y:166 var
R29391:29391 VC.Verif_hash <> z:167 var
R29395:29395 VC.Verif_hash <> p:164 var
R29652:29660 VST.msl.seplog <> ::logic:x_'*'_x not
R29497:29504 VST.msl.seplog <> ::logic:x_'*'_x not
R29446:29453 VST.msl.seplog <> ::logic:x_'*'_x not
R29405:29412 VST.floyd.field_at <> field_at def
R29414:29416 VST.veric.shares <> Ews def
R29418:29422 VC.Verif_hash <> tcell def
R29424:29424 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R29441:29441 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R29425:29435 VST.floyd.nested_field_lemmas <> StructField constr
R29437:29440 VC.hash <> _key def
R29443:29443 VC.Verif_hash <> x:165 var
R29445:29445 VC.Verif_hash <> p:164 var
R29454:29461 VST.floyd.field_at <> field_at def
R29463:29465 VST.veric.shares <> Ews def
R29467:29471 VC.Verif_hash <> tcell def
R29473:29473 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R29492:29492 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R29474:29484 VST.floyd.nested_field_lemmas <> StructField constr
R29486:29491 VC.hash <> _count def
R29494:29494 VC.Verif_hash <> y:166 var
R29496:29496 VC.Verif_hash <> p:164 var
R29505:29510 VST.floyd.mapsto_memory_block <> spacer def
R29512:29514 VST.veric.shares <> Ews def
R29563:29565 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R29517:29535 VST.floyd.nested_field_lemmas <> nested_field_offset def
R29543:29543 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R29562:29562 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R29544:29554 VST.floyd.nested_field_lemmas <> StructField constr
R29556:29561 VC.hash <> _count def
R29537:29541 VC.Verif_hash <> tcell def
R29566:29571 VST.veric.expr <> sizeof def
R29573:29577 compcert.export.Ctypesdefs <> tuint def
R29604:29622 VST.floyd.nested_field_lemmas <> nested_field_offset def
R29630:29630 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R29648:29648 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R29631:29641 VST.floyd.nested_field_lemmas <> StructField constr
R29643:29647 VC.hash <> _next def
R29624:29628 VC.Verif_hash <> tcell def
R29651:29651 VC.Verif_hash <> p:164 var
R29661:29668 VST.floyd.field_at <> field_at def
R29670:29672 VST.veric.shares <> Ews def
R29674:29678 VC.Verif_hash <> tcell def
R29680:29680 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R29698:29698 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R29681:29691 VST.floyd.nested_field_lemmas <> StructField constr
R29693:29697 VC.hash <> _next def
R29700:29700 VC.Verif_hash <> z:167 var
R29702:29702 VC.Verif_hash <> p:164 var
R29743:29749 VST.floyd.field_at <> data_at def
R29743:29749 VST.floyd.field_at <> data_at def
R29768:29773 VST.floyd.mapsto_memory_block <> spacer def
R29792:29801 VST.msl.seplog <> sepcon_emp meth
R29792:29801 VST.msl.seplog <> sepcon_emp meth
R29792:29801 VST.msl.seplog <> sepcon_emp meth
R29876:29887 VST.msl.seplog <> sepcon_assoc meth
R29876:29887 VST.msl.seplog <> sepcon_assoc meth
R29876:29887 VST.msl.seplog <> sepcon_assoc meth
R29876:29887 VST.msl.seplog <> sepcon_assoc meth
R29876:29887 VST.msl.seplog <> sepcon_assoc meth
R29876:29887 VST.msl.seplog <> sepcon_assoc meth
prf 30207:30230 <> example_field_at_data_at
binder 30241:30241 <> p:168
R30247:30249 compcert.common.Values <> val ind
binder 30244:30244 <> z:169
R30298:30303 Coq.Init.Logic <> ::type_scope:x_'='_x not
R30256:30263 VST.floyd.field_at <> field_at def
R30265:30267 VST.veric.shares <> Ews def
R30269:30273 VC.Verif_hash <> tcell def
R30275:30275 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R30293:30293 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R30276:30286 VST.floyd.nested_field_lemmas <> StructField constr
R30288:30292 VC.hash <> _next def
R30295:30295 VC.Verif_hash <> z:169 var
R30297:30297 VC.Verif_hash <> p:168 var
R30304:30310 VST.floyd.field_at <> data_at def
R30312:30314 VST.veric.shares <> Ews def
R30317:30320 compcert.export.Ctypesdefs <> tptr def
R30322:30326 VC.Verif_hash <> tcell def
R30329:30329 VC.Verif_hash <> z:169 var
R30337:30349 VST.floyd.nested_field_lemmas <> field_address def
R30351:30355 VC.Verif_hash <> tcell def
R30357:30357 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R30375:30375 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R30358:30368 VST.floyd.nested_field_lemmas <> StructField constr
R30370:30374 VC.hash <> _next def
R30377:30377 VC.Verif_hash <> p:168 var
R30405:30420 VST.floyd.field_at <> field_at_data_at thm
R30405:30420 VST.floyd.field_at <> field_at_data_at thm
R30405:30420 VST.floyd.field_at <> field_at_data_at thm
prf 30724:30748 <> example_field_at_data_at'
binder 30759:30759 <> p:170
R30765:30767 compcert.common.Values <> val ind
binder 30762:30762 <> z:171
R30816:30823 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R30774:30781 VST.floyd.field_at <> field_at def
R30783:30785 VST.veric.shares <> Ews def
R30787:30791 VC.Verif_hash <> tcell def
R30793:30793 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R30811:30811 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R30794:30804 VST.floyd.nested_field_lemmas <> StructField constr
R30806:30810 VC.hash <> _next def
R30813:30813 VC.Verif_hash <> z:171 var
R30815:30815 VC.Verif_hash <> p:170 var
R30824:30830 VST.floyd.field_at <> data_at def
R30832:30834 VST.veric.shares <> Ews def
R30837:30840 compcert.export.Ctypesdefs <> tptr def
R30842:30846 VC.Verif_hash <> tcell def
R30849:30849 VC.Verif_hash <> z:171 var
R30857:30866 VST.veric.val_lemmas <> offset_val def
R30888:30888 VC.Verif_hash <> p:170 var
R30870:30872 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R30873:30878 VST.veric.expr <> sizeof def
R30880:30885 VST.veric.Cop2 <> size_t def
R30916:30931 VST.floyd.field_at <> field_at_data_at thm
R30916:30931 VST.floyd.field_at <> field_at_data_at thm
R30916:30931 VST.floyd.field_at <> field_at_data_at thm
R30942:30954 VST.floyd.nested_field_lemmas <> field_address def
prf 31094:31119 <> example_field_at_data_at''
binder 31130:31130 <> p:172
R31136:31138 compcert.common.Values <> val ind
binder 31133:31133 <> z:173
R31211:31216 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R31145:31151 VST.floyd.field_at <> data_at def
R31153:31155 VST.veric.shares <> Ews def
R31158:31161 compcert.export.Ctypesdefs <> tptr def
R31163:31167 VC.Verif_hash <> tcell def
R31170:31170 VC.Verif_hash <> z:173 var
R31178:31187 VST.veric.val_lemmas <> offset_val def
R31209:31209 VC.Verif_hash <> p:172 var
R31191:31193 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R31194:31199 VST.veric.expr <> sizeof def
R31201:31206 VST.veric.Cop2 <> size_t def
R31217:31224 VST.floyd.field_at <> field_at def
R31226:31228 VST.veric.shares <> Ews def
R31230:31234 VC.Verif_hash <> tcell def
R31236:31236 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R31254:31254 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R31237:31247 VST.floyd.nested_field_lemmas <> StructField constr
R31249:31253 VC.hash <> _next def
R31256:31256 VC.Verif_hash <> z:173 var
R31258:31258 VC.Verif_hash <> p:172 var
R31286:31301 VST.floyd.field_at <> field_at_data_at thm
R31286:31301 VST.floyd.field_at <> field_at_data_at thm
R31286:31301 VST.floyd.field_at <> field_at_data_at thm
R31320:31332 VST.floyd.nested_field_lemmas <> field_address def
R31344:31350 VST.msl.Coqlib2 <> if_true thm
R31344:31350 VST.msl.Coqlib2 <> if_true thm
R31344:31350 VST.msl.Coqlib2 <> if_true thm
R31344:31350 VST.msl.Coqlib2 <> if_true thm
prf 31471:31497 <> example_field_at_data_at'''
binder 31508:31508 <> p:174
R31514:31516 compcert.common.Values <> val ind
binder 31511:31511 <> z:175
R31566:31572 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R31522:31537 VST.floyd.nested_field_lemmas <> field_compatible def
R31539:31543 VC.Verif_hash <> tcell def
R31545:31545 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R31563:31563 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R31546:31556 VST.floyd.nested_field_lemmas <> StructField constr
R31558:31562 VC.hash <> _next def
R31565:31565 VC.Verif_hash <> p:174 var
R31639:31644 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R31573:31579 VST.floyd.field_at <> data_at def
R31581:31583 VST.veric.shares <> Ews def
R31586:31589 compcert.export.Ctypesdefs <> tptr def
R31591:31595 VC.Verif_hash <> tcell def
R31598:31598 VC.Verif_hash <> z:175 var
R31606:31615 VST.veric.val_lemmas <> offset_val def
R31637:31637 VC.Verif_hash <> p:174 var
R31619:31621 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R31622:31627 VST.veric.expr <> sizeof def
R31629:31634 VST.veric.Cop2 <> size_t def
R31645:31652 VST.floyd.field_at <> field_at def
R31654:31656 VST.veric.shares <> Ews def
R31658:31662 VC.Verif_hash <> tcell def
R31664:31664 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R31682:31682 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R31665:31675 VST.floyd.nested_field_lemmas <> StructField constr
R31677:31681 VC.hash <> _next def
R31684:31684 VC.Verif_hash <> z:175 var
R31686:31686 VC.Verif_hash <> p:174 var
R31714:31729 VST.floyd.field_at <> field_at_data_at thm
R31714:31729 VST.floyd.field_at <> field_at_data_at thm
R31714:31729 VST.floyd.field_at <> field_at_data_at thm
R31748:31760 VST.floyd.nested_field_lemmas <> field_address def
R31772:31778 VST.msl.Coqlib2 <> if_true thm
R31772:31778 VST.msl.Coqlib2 <> if_true thm
R31772:31778 VST.msl.Coqlib2 <> if_true thm
R31897:31909 VST.floyd.nested_field_lemmas <> field_address def
R33682:33697 VST.floyd.nested_field_lemmas <> field_compatible def
def 33952:34003 <> Unnamed_thm
R33958:33975 VST.floyd.nested_field_lemmas <> legal_nested_field def
R33977:33981 VC.Verif_hash <> tcell def
R33983:33983 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R34002:34002 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R33984:33994 VST.floyd.nested_field_lemmas <> StructField constr
R33996:34001 VC.hash <> _count def
def 34074:34123 <> Unnamed_thm0
R34080:34081 Coq.Init.Logic <> ::type_scope:'~'_x not
R34082:34099 VST.floyd.nested_field_lemmas <> legal_nested_field def
R34101:34105 VC.Verif_hash <> tcell def
R34107:34107 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R34122:34122 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R34108:34118 VST.floyd.nested_field_lemmas <> StructField constr
R34120:34121 VC.hash <> _s def
def 34218:34283 <> Unnamed_thm1
R34224:34241 VST.floyd.nested_field_lemmas <> legal_nested_field def
R34244:34249 compcert.export.Ctypesdefs <> tarray def
R34252:34255 compcert.export.Ctypesdefs <> tptr def
R34257:34261 VC.Verif_hash <> tcell def
R34269:34269 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R34282:34282 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R34270:34279 VST.floyd.nested_field_lemmas <> ArraySubsc constr
def 34380:34447 <> Unnamed_thm2
R34386:34403 VST.floyd.nested_field_lemmas <> legal_nested_field def
R34406:34411 compcert.export.Ctypesdefs <> tarray def
R34414:34417 compcert.export.Ctypesdefs <> tptr def
R34419:34423 VC.Verif_hash <> tcell def
R34431:34431 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R34446:34446 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R34432:34441 VST.floyd.nested_field_lemmas <> ArraySubsc constr
def 34548:34617 <> Unnamed_thm3
R34554:34555 Coq.Init.Logic <> ::type_scope:'~'_x not
R34556:34573 VST.floyd.nested_field_lemmas <> legal_nested_field def
R34576:34581 compcert.export.Ctypesdefs <> tarray def
R34584:34587 compcert.export.Ctypesdefs <> tptr def
R34589:34593 VC.Verif_hash <> tcell def
R34601:34601 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R34616:34616 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R34602:34611 VST.floyd.nested_field_lemmas <> ArraySubsc constr
R34996:35014 VST.floyd.nested_field_lemmas <> legal_nested_field0 def
def 35121:35189 <> Unnamed_thm4
R35127:35145 VST.floyd.nested_field_lemmas <> legal_nested_field0 def
R35148:35153 compcert.export.Ctypesdefs <> tarray def
R35156:35159 compcert.export.Ctypesdefs <> tptr def
R35161:35165 VC.Verif_hash <> tcell def
R35173:35173 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R35188:35188 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R35174:35183 VST.floyd.nested_field_lemmas <> ArraySubsc constr
def 35296:35364 <> Unnamed_thm5
R35302:35320 VST.floyd.nested_field_lemmas <> legal_nested_field0 def
R35323:35328 compcert.export.Ctypesdefs <> tarray def
R35331:35334 compcert.export.Ctypesdefs <> tptr def
R35336:35340 VC.Verif_hash <> tcell def
R35348:35348 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R35363:35363 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R35349:35358 VST.floyd.nested_field_lemmas <> ArraySubsc constr
def 35472:35541 <> Unnamed_thm6
R35478:35479 Coq.Init.Logic <> ::type_scope:'~'_x not
R35480:35497 VST.floyd.nested_field_lemmas <> legal_nested_field def
R35500:35505 compcert.export.Ctypesdefs <> tarray def
R35508:35511 compcert.export.Ctypesdefs <> tptr def
R35513:35517 VC.Verif_hash <> tcell def
R35525:35525 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R35540:35540 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R35526:35535 VST.floyd.nested_field_lemmas <> ArraySubsc constr
R35802:35818 VST.floyd.nested_field_lemmas <> field_compatible0 def
R36197:36223 VC.Verif_hash <> example_field_at_data_at''' thm
R37719:37734 VST.floyd.field_at_wand <> wand_slice_array thm
R38213:38227 VST.floyd.field_at_wand <> array_with_hole def
prf 39449:39477 <> body_incr_field_address_lemma
R39497:39499 compcert.common.Values <> val ind
binder 39490:39494 <> table:176
R39507:39507 Coq.Numbers.BinNums <> Z ind
binder 39503:39503 <> h:177
R39523:39528 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R39514:39517 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R39519:39521 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R39518:39518 VC.Verif_hash <> h:177 var
R39518:39518 VC.Verif_hash <> h:177 var
R39522:39522 VC.Hashfun <> N def
R39632:39637 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R39529:39544 VST.floyd.nested_field_lemmas <> field_compatible def
R39547:39552 compcert.export.Ctypesdefs <> tarray def
R39555:39558 compcert.export.Ctypesdefs <> tptr def
R39560:39564 VC.Verif_hash <> tcell def
R39567:39567 VC.Hashfun <> N def
R39570:39571 Coq.Lists.List ListNotations ::list_scope:'['_']' not
R39578:39590 VST.floyd.nested_field_lemmas <> field_address def
R39592:39601 VC.Verif_hash <> thashtable def
R39603:39603 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R39624:39624 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R39604:39614 VST.floyd.nested_field_lemmas <> StructField constr
R39616:39623 VC.hash <> _buckets def
R39626:39630 VC.Verif_hash <> table:176 var
R39801:39806 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R39638:39653 VST.floyd.nested_field_lemmas <> field_compatible def
R39656:39659 compcert.export.Ctypesdefs <> tptr def
R39661:39665 VC.Verif_hash <> tcell def
R39668:39669 Coq.Lists.List ListNotations ::list_scope:'['_']' not
R39676:39689 VST.floyd.nested_field_lemmas <> field_address0 def
R39692:39697 compcert.export.Ctypesdefs <> tarray def
R39700:39703 compcert.export.Ctypesdefs <> tptr def
R39705:39709 VC.Verif_hash <> tcell def
R39712:39712 VC.Hashfun <> N def
R39723:39723 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R39736:39736 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R39724:39733 VST.floyd.nested_field_lemmas <> ArraySubsc constr
R39735:39735 VC.Verif_hash <> h:177 var
R39746:39758 VST.floyd.nested_field_lemmas <> field_address def
R39760:39769 VC.Verif_hash <> thashtable def
R39771:39771 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R39792:39792 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R39772:39782 VST.floyd.nested_field_lemmas <> StructField constr
R39784:39791 VC.hash <> _buckets def
R39794:39798 VC.Verif_hash <> table:176 var
R39849:39853 Coq.Init.Logic <> ::type_scope:x_'='_x not
R39807:39816 VST.veric.val_lemmas <> offset_val def
R39844:39848 VC.Verif_hash <> table:176 var
R39838:39840 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R39819:39824 VST.veric.expr <> sizeof def
R39827:39830 compcert.export.Ctypesdefs <> tptr def
R39832:39836 VC.Verif_hash <> tcell def
R39841:39841 VC.Verif_hash <> h:177 var
R39854:39867 VST.floyd.nested_field_lemmas <> field_address0 def
R39870:39875 compcert.export.Ctypesdefs <> tarray def
R39878:39881 compcert.export.Ctypesdefs <> tptr def
R39883:39887 VC.Verif_hash <> tcell def
R39890:39890 VC.Hashfun <> N def
R39893:39893 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R39906:39906 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R39894:39903 VST.floyd.nested_field_lemmas <> ArraySubsc constr
R39905:39905 VC.Verif_hash <> h:177 var
R39913:39925 VST.floyd.nested_field_lemmas <> field_address def
R39927:39936 VC.Verif_hash <> thashtable def
R39938:39938 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R39959:39959 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R39939:39949 VST.floyd.nested_field_lemmas <> StructField constr
R39951:39958 VC.hash <> _buckets def
R39961:39965 VC.Verif_hash <> table:176 var
R40121:40141 VST.floyd.field_compat <> field_address0_offset thm
R40121:40141 VST.floyd.field_compat <> field_address0_offset thm
R40121:40141 VST.floyd.field_compat <> field_address0_offset thm
R40184:40203 VST.floyd.field_compat <> field_address_offset thm
R40184:40203 VST.floyd.field_compat <> field_address_offset thm
R40184:40203 VST.floyd.field_compat <> field_address_offset thm
prf 40370:40394 <> data_at_thashtable_tarray
binder 40405:40406 <> al:178
binder 40408:40412 <> table:179
R40450:40458 VST.msl.seplog <> ::logic_derives:x_'|--'_x not
R40419:40425 VST.floyd.field_at <> data_at def
R40427:40429 VST.veric.shares <> Ews def
R40431:40440 VC.Verif_hash <> thashtable def
R40442:40443 VC.Verif_hash <> al:178 var
R40445:40449 VC.Verif_hash <> table:179 var
R40459:40465 VST.floyd.field_at <> data_at def
R40467:40469 VST.veric.shares <> Ews def
R40472:40477 compcert.export.Ctypesdefs <> tarray def
R40480:40483 compcert.export.Ctypesdefs <> tptr def
R40485:40489 VC.Verif_hash <> tcell def
R40492:40492 VC.Hashfun <> N def
R40495:40496 VC.Verif_hash <> al:178 var
R40510:40522 VST.floyd.nested_field_lemmas <> field_address def
R40524:40533 VC.Verif_hash <> thashtable def
R40535:40535 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R40556:40556 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R40536:40546 VST.floyd.nested_field_lemmas <> StructField constr
R40548:40555 VC.hash <> _buckets def
R40558:40562 VC.Verif_hash <> table:179 var
R40597:40603 VST.floyd.field_at <> data_at def
R40597:40603 VST.floyd.field_at <> data_at def
R40627:40642 VST.floyd.field_at <> field_at_data_at thm
R40627:40642 VST.floyd.field_at <> field_at_data_at thm
R40627:40642 VST.floyd.field_at <> field_at_data_at thm
R40658:40669 VST.msl.seplog <> derives_refl meth
R40658:40669 VST.msl.seplog <> derives_refl meth
prf 40736:40744 <> body_incr
R40747:40756 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R40777:40785 VC.Verif_hash <> incr_spec def
R40770:40775 VC.hash <> f_incr def
R40764:40768 VC.Verif_hash <> Gprog def
R40758:40762 VC.Verif_hash <> Vprog def
R40865:40869 VST.veric.val_lemmas <> isptr def
R40865:40869 VST.veric.val_lemmas <> isptr def
R41071:41080 VST.floyd.client_lemmas <> abbreviate def
R41102:41106 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R41113:41121 compcert.cfrontend.Clight <> Ssequence constr
R41128:41136 compcert.cfrontend.Clight <> Ssequence constr
R41102:41106 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Def semax defax
R41113:41121 compcert.cfrontend.Clight <> Ssequence constr
R41128:41136 compcert.cfrontend.Clight <> Ssequence constr
R41160:41175 VST.floyd.semax_tactics <> semax_unfold_seq thm
R41178:41186 compcert.cfrontend.Clight <> Ssequence constr
R41189:41197 compcert.cfrontend.Clight <> Ssequence constr
R41160:41175 VST.floyd.semax_tactics <> semax_unfold_seq thm
R41178:41186 compcert.cfrontend.Clight <> Ssequence constr
R41189:41197 compcert.cfrontend.Clight <> Ssequence constr
R41246:41248 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R41287:41288 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R41254:41257 Coq.Init.Datatypes <> list ind
R41280:41282 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R41260:41263 Coq.Init.Datatypes <> list ind
R41275:41277 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R41266:41269 Coq.Init.Datatypes <> list ind
R41271:41274 compcert.lib.Integers <> byte abbrev
R41278:41278 Coq.Numbers.BinNums <> Z ind
R41283:41285 compcert.common.Values <> val ind
binder 41249:41251 <> cts:180
R41289:41294 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R41317:41318 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R41347:41348 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R41364:41365 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R41303:41305 Coq.Init.Logic <> ::type_scope:x_'='_x not
R41306:41308 Coq.Lists.List <> map def
R41314:41316 VC.Verif_hash <> cts:180 var
R41310:41312 Coq.Init.Datatypes <> fst def
R41320:41323 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R41343:41345 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R41337:41341 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R41324:41330 VC.Hashfun <> hashfun def
R41342:41342 VC.Hashfun <> N def
R41337:41341 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R41324:41330 VC.Hashfun <> hashfun def
R41342:41342 VC.Hashfun <> N def
R41346:41346 VC.Hashfun <> N def
R41360:41362 Coq.Init.Logic <> ::type_scope:x_'='_x not
R41349:41355 Coq.ZArith.Zcomplements <> Zlength def
R41357:41359 VC.Verif_hash <> cts:180 var
R41363:41363 VC.Hashfun <> N def
R41366:41372 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R41420:41421 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R41463:41464 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R41482:41483 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R41493:41494 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R41503:41504 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R41373:41376 VST.floyd.canon <> temp constr
R41378:41379 VC.hash <> _b def
R41382:41385 compcert.common.Values <> Vint constr
R41388:41395 compcert.lib.Integers Int repr def
R41411:41415 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R41398:41404 VC.Hashfun <> hashfun def
R41416:41416 VC.Hashfun <> N def
R41422:41425 VST.floyd.canon <> temp constr
R41427:41428 VC.hash <> _h def
R41431:41434 compcert.common.Values <> Vint constr
R41437:41444 compcert.lib.Integers Int repr def
R41447:41453 VC.Hashfun <> hashfun def
R41465:41468 VST.floyd.canon <> temp constr
R41470:41475 VC.hash <> _table def
R41484:41487 VST.floyd.canon <> temp constr
R41489:41490 VC.hash <> _s def
R41495:41499 VST.floyd.canon <> gvars constr
R41505:41509 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R41529:41530 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R41564:41565 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R41671:41672 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R41706:41707 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R41718:41718 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R41510:41516 VST.floyd.entailer <> cstring def
R41518:41520 VST.veric.shares <> Ews def
R41531:41542 VST.floyd.library <> malloc_token defax
R41548:41557 VC.Verif_hash <> thashtable def
R41544:41546 VST.veric.shares <> Ews def
R41566:41572 VST.floyd.field_at <> data_at def
R41574:41576 VST.veric.shares <> Ews def
R41579:41584 compcert.export.Ctypesdefs <> tarray def
R41587:41590 compcert.export.Ctypesdefs <> tptr def
R41592:41596 VC.Verif_hash <> tcell def
R41599:41599 VC.Hashfun <> N def
R41603:41605 Coq.Lists.List <> map def
R41611:41613 VC.Verif_hash <> cts:180 var
R41607:41609 Coq.Init.Datatypes <> snd def
R41617:41629 VST.floyd.nested_field_lemmas <> field_address def
R41631:41640 VC.Verif_hash <> thashtable def
R41642:41642 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R41663:41663 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R41643:41653 VST.floyd.nested_field_lemmas <> StructField constr
R41655:41662 VC.hash <> _buckets def
R41673:41683 VST.msl.iter_sepcon <> iter_sepcon def
R41703:41705 VC.Verif_hash <> cts:180 var
R41686:41692 VC.Verif_hash <> uncurry def
R41694:41700 VC.Verif_hash <> listrep def
R41708:41714 VST.floyd.library <> mem_mgr defax
R41728:41737 VST.floyd.canon <> semax_seq' thm
R41246:41248 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R41287:41288 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R41254:41257 Coq.Init.Datatypes <> list ind
R41280:41282 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R41260:41263 Coq.Init.Datatypes <> list ind
R41275:41277 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R41266:41269 Coq.Init.Datatypes <> list ind
R41271:41274 compcert.lib.Integers <> byte abbrev
R41278:41278 Coq.Numbers.BinNums <> Z ind
R41283:41285 compcert.common.Values <> val ind
binder 41249:41251 <> cts:181
R41289:41294 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R41317:41318 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R41347:41348 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R41364:41365 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R41303:41305 Coq.Init.Logic <> ::type_scope:x_'='_x not
R41306:41308 Coq.Lists.List <> map def
R41314:41316 VC.Verif_hash <> cts:181 var
R41310:41312 Coq.Init.Datatypes <> fst def
R41320:41323 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R41343:41345 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R41337:41341 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R41324:41330 VC.Hashfun <> hashfun def
R41342:41342 VC.Hashfun <> N def
R41337:41341 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R41324:41330 VC.Hashfun <> hashfun def
R41342:41342 VC.Hashfun <> N def
R41346:41346 VC.Hashfun <> N def
R41360:41362 Coq.Init.Logic <> ::type_scope:x_'='_x not
R41349:41355 Coq.ZArith.Zcomplements <> Zlength def
R41357:41359 VC.Verif_hash <> cts:181 var
R41363:41363 VC.Hashfun <> N def
R41366:41372 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R41420:41421 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R41463:41464 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R41482:41483 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R41493:41494 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R41503:41504 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R41373:41376 VST.floyd.canon <> temp constr
R41378:41379 VC.hash <> _b def
R41382:41385 compcert.common.Values <> Vint constr
R41388:41395 compcert.lib.Integers Int repr def
R41411:41415 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R41398:41404 VC.Hashfun <> hashfun def
R41416:41416 VC.Hashfun <> N def
R41422:41425 VST.floyd.canon <> temp constr
R41427:41428 VC.hash <> _h def
R41431:41434 compcert.common.Values <> Vint constr
R41437:41444 compcert.lib.Integers Int repr def
R41447:41453 VC.Hashfun <> hashfun def
R41465:41468 VST.floyd.canon <> temp constr
R41470:41475 VC.hash <> _table def
R41484:41487 VST.floyd.canon <> temp constr
R41489:41490 VC.hash <> _s def
R41495:41499 VST.floyd.canon <> gvars constr
R41505:41509 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R41529:41530 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R41564:41565 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R41671:41672 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R41706:41707 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R41718:41718 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R41510:41516 VST.floyd.entailer <> cstring def
R41518:41520 VST.veric.shares <> Ews def
R41531:41542 VST.floyd.library <> malloc_token defax
R41548:41557 VC.Verif_hash <> thashtable def
R41544:41546 VST.veric.shares <> Ews def
R41566:41572 VST.floyd.field_at <> data_at def
R41574:41576 VST.veric.shares <> Ews def
R41579:41584 compcert.export.Ctypesdefs <> tarray def
R41587:41590 compcert.export.Ctypesdefs <> tptr def
R41592:41596 VC.Verif_hash <> tcell def
R41599:41599 VC.Hashfun <> N def
R41603:41605 Coq.Lists.List <> map def
R41611:41613 VC.Verif_hash <> cts:181 var
R41607:41609 Coq.Init.Datatypes <> snd def
R41617:41629 VST.floyd.nested_field_lemmas <> field_address def
R41631:41640 VC.Verif_hash <> thashtable def
R41642:41642 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R41663:41663 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R41643:41653 VST.floyd.nested_field_lemmas <> StructField constr
R41655:41662 VC.hash <> _buckets def
R41673:41683 VST.msl.iter_sepcon <> iter_sepcon def
R41703:41705 VC.Verif_hash <> cts:181 var
R41686:41692 VC.Verif_hash <> uncurry def
R41694:41700 VC.Verif_hash <> listrep def
R41708:41714 VST.floyd.library <> mem_mgr defax
R41728:41737 VST.floyd.canon <> semax_seq' thm
R41842:41854 VC.Hashfun <> hashtable_get def
R41873:41883 VST.zlist.sublist <> Zlength_map thm
R41873:41883 VST.zlist.sublist <> Zlength_map thm
R41873:41883 VST.zlist.sublist <> Zlength_map thm
R41921:41925 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R41908:41914 VC.Hashfun <> hashfun def
R41926:41926 VC.Hashfun <> N def
R41921:41925 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R41908:41914 VC.Hashfun <> hashfun def
R41926:41926 VC.Hashfun <> N def
R41946:41961 VST.floyd.field_at_wand <> wand_slice_array thm
R41976:41979 compcert.export.Ctypesdefs <> tptr def
R41981:41985 VC.Verif_hash <> tcell def
R41971:41971 VC.Hashfun <> N def
R41967:41967 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R41946:41961 VST.floyd.field_at_wand <> wand_slice_array thm
R41976:41979 compcert.export.Ctypesdefs <> tptr def
R41981:41985 VC.Verif_hash <> tcell def
R41971:41971 VC.Hashfun <> N def
R41967:41967 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R41946:41961 VST.floyd.field_at_wand <> wand_slice_array thm
R41976:41979 compcert.export.Ctypesdefs <> tptr def
R41981:41985 VC.Verif_hash <> tcell def
R41971:41971 VC.Hashfun <> N def
R41967:41967 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
